// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

enum Location {
  pionerskaya
  petrogradskaya
  udelnaya
  zvezdnaya
  sportivnaya
}

enum Gender {
  female
  male
  whatever
}

enum Role {
  user
  coach
}

enum FitnessLevel {
  beginner
  amateur
  professional
}

enum Exercise {
  yoga
  running
  boxing
  stretching
  crossfit
  aerobics
  pilates
}

enum TrainingTime {
  short
  medium
  long
  extraLong
}

enum PaymentMethod {
  visa
  mir
  umoney
}

generator client {
  provider        = "prisma-client"
  previewFeatures = ["strictUndefinedChecks"]
  output          = "../src/lib/generated/prisma"
  moduleFormat    = "cjs"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              String            @id @default(uuid())
  name            String            @db.VarChar(15)
  email           String            @unique @db.VarChar(40)
  password        String            @db.VarChar(60)
  avatarId        String?           @db.VarChar(36)
  gender          Gender
  birthday        DateTime?
  description     String?           @db.VarChar(140)
  location        Location
  role            Role
  backgroundIds   String[]
  isReady         Boolean           @default(false) @map("is_ready")
  createdAt       DateTime          @default(now()) @map("created_at")
  updatedAt       DateTime          @updatedAt @map("updated_at")
  questionnaire   Questionnaire?
  balance         Balance[]
  refreshSessions RefreshSessions[]
  feedbacks       Feedback[]
  orders          Order[]
  trainings       Training[]
  friends         Friend[]          @relation("UserFriends")
  friendsOf       Friend[]          @relation("FriendUsers")

  @@map("users")
}

model RefreshSessions {
  id        String   @id @default(uuid())
  tokenId   String   @unique @map("token_id") @db.VarChar(36)
  expiresIn DateTime @map("expires_in")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  userId    String   @map("user_id") @db.VarChar(36)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("refresh-sessions")
}

model Friend {
  id                 String   @id @default(uuid())
  userId             String   @map("user_id") @db.VarChar(36)
  user               User     @relation("UserFriends", fields: [userId], references: [id], onDelete: Cascade)
  friendId           String   @map("friend_id") @db.VarChar(36)
  friend             User     @relation("FriendUsers", fields: [friendId], references: [id], onDelete: Cascade)
  isJoinTraining     Boolean? @map("is_join_training")
  isPersonalTraining Boolean? @map("is_personal_training")
  createdAt          DateTime @default(now()) @map("created_at")
  updatedAt          DateTime @updatedAt @map("updated_at")

  @@unique([userId, friendId])
  @@map("friends")
}

model Questionnaire {
  id               String        @id @default(uuid())
  fitnessLevel     FitnessLevel  @map("fitness_level")
  exercises        Exercise[]
  trainingTime     TrainingTime? @map("training_time")
  qualificationIds String[]
  caloriesLose     Int?          @default(0) @map("calories_lose")
  caloriesWaste    Int?          @default(0) @map("calories_waste")
  experience       String?       @db.VarChar(140)
  isPersonal       Boolean?      @default(false) @map("is_personal")
  userId           String        @unique @map("user_id") @db.VarChar(36)
  user             User          @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("questionnaire")
}

model Balance {
  id         String   @id @default(uuid())
  amount     Int      @default(0)
  userId     String   @map("user_id") @db.VarChar(36)
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  trainingId String   @map("training_id") @db.VarChar(36)
  training   Training @relation(fields: [trainingId], references: [id], onDelete: Cascade)

  @@map("balance")
}

model Training {
  id           String       @id @default(uuid())
  title        String       @db.VarChar(15)
  backgroundId String       @db.VarChar(36)
  level        FitnessLevel
  type         Exercise
  trainingTime TrainingTime @map("training_time")
  calories     Int          @default(0)
  gender       Gender
  rating       Int          @default(0)
  description  String       @db.VarChar(140)
  price        Int          @default(0)
  videoId      String       @db.VarChar(36)
  coachName    String       @db.VarChar(15)
  specialOffer Boolean      @default(false) @map("special_offer")
  createdAt    DateTime     @default(now()) @map("created_at")
  updatedAt    DateTime     @updatedAt @map("updated_at")
  coachId      String       @map("coach_id") @db.VarChar(36)
  coach        User         @relation(fields: [coachId], references: [id], onDelete: Cascade)
  feedbacks    Feedback[]
  balances     Balance[]
  orders       Order[]

  @@map("trainings")
}

model Feedback {
  id         String   @id @default(uuid())
  assessment Int
  content    String   @db.VarChar(1024)
  createdAt  DateTime @default(now()) @map("created_at")
  authorId   String   @map("author_id") @db.VarChar(36)
  author     User     @relation(fields: [authorId], references: [id], onDelete: Cascade)
  trainingId String   @map("training_id") @db.VarChar(36)
  training   Training @relation(fields: [trainingId], references: [id], onDelete: Cascade)

  @@map("feedbacks")
}

model Order {
  id         String        @id @default(uuid())
  exercise   Exercise
  price      Int           @default(0)
  count      Int
  amount     Int
  payment    PaymentMethod
  createdAt  DateTime      @default(now()) @map("created_at")
  userId     String        @map("user_id") @db.VarChar(36)
  user       User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  trainingId String        @map("training_id") @db.VarChar(36)
  training   Training      @relation(fields: [trainingId], references: [id], onDelete: Cascade)

  @@map("orders")
}
