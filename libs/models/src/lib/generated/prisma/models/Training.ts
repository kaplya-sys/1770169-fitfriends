
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/**
 * This file exports the `Training` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums"
import type * as Prisma from "../internal/prismaNamespace"

/**
 * Model Training
 * 
 */
export type TrainingModel = runtime.Types.Result.DefaultSelection<Prisma.$TrainingPayload>

export type AggregateTraining = {
  _count: TrainingCountAggregateOutputType | null
  _avg: TrainingAvgAggregateOutputType | null
  _sum: TrainingSumAggregateOutputType | null
  _min: TrainingMinAggregateOutputType | null
  _max: TrainingMaxAggregateOutputType | null
}

export type TrainingAvgAggregateOutputType = {
  calorie: number | null
  rating: number | null
  price: number | null
}

export type TrainingSumAggregateOutputType = {
  calorie: number | null
  rating: number | null
  price: number | null
}

export type TrainingMinAggregateOutputType = {
  id: string | null
  title: string | null
  background: string | null
  level: $Enums.FitnessLevel | null
  type: $Enums.Exercise | null
  trainingTime: $Enums.TrainingTime | null
  calorie: number | null
  gender: $Enums.Gender | null
  rating: number | null
  description: string | null
  price: number | null
  video: string | null
  coachName: string | null
  specialOffer: boolean | null
  createdAt: Date | null
  updatedAt: Date | null
  coachId: string | null
}

export type TrainingMaxAggregateOutputType = {
  id: string | null
  title: string | null
  background: string | null
  level: $Enums.FitnessLevel | null
  type: $Enums.Exercise | null
  trainingTime: $Enums.TrainingTime | null
  calorie: number | null
  gender: $Enums.Gender | null
  rating: number | null
  description: string | null
  price: number | null
  video: string | null
  coachName: string | null
  specialOffer: boolean | null
  createdAt: Date | null
  updatedAt: Date | null
  coachId: string | null
}

export type TrainingCountAggregateOutputType = {
  id: number
  title: number
  background: number
  level: number
  type: number
  trainingTime: number
  calorie: number
  gender: number
  rating: number
  description: number
  price: number
  video: number
  coachName: number
  specialOffer: number
  createdAt: number
  updatedAt: number
  coachId: number
  _all: number
}


export type TrainingAvgAggregateInputType = {
  calorie?: true | runtime.Types.Skip
  rating?: true | runtime.Types.Skip
  price?: true | runtime.Types.Skip
}

export type TrainingSumAggregateInputType = {
  calorie?: true | runtime.Types.Skip
  rating?: true | runtime.Types.Skip
  price?: true | runtime.Types.Skip
}

export type TrainingMinAggregateInputType = {
  id?: true | runtime.Types.Skip
  title?: true | runtime.Types.Skip
  background?: true | runtime.Types.Skip
  level?: true | runtime.Types.Skip
  type?: true | runtime.Types.Skip
  trainingTime?: true | runtime.Types.Skip
  calorie?: true | runtime.Types.Skip
  gender?: true | runtime.Types.Skip
  rating?: true | runtime.Types.Skip
  description?: true | runtime.Types.Skip
  price?: true | runtime.Types.Skip
  video?: true | runtime.Types.Skip
  coachName?: true | runtime.Types.Skip
  specialOffer?: true | runtime.Types.Skip
  createdAt?: true | runtime.Types.Skip
  updatedAt?: true | runtime.Types.Skip
  coachId?: true | runtime.Types.Skip
}

export type TrainingMaxAggregateInputType = {
  id?: true | runtime.Types.Skip
  title?: true | runtime.Types.Skip
  background?: true | runtime.Types.Skip
  level?: true | runtime.Types.Skip
  type?: true | runtime.Types.Skip
  trainingTime?: true | runtime.Types.Skip
  calorie?: true | runtime.Types.Skip
  gender?: true | runtime.Types.Skip
  rating?: true | runtime.Types.Skip
  description?: true | runtime.Types.Skip
  price?: true | runtime.Types.Skip
  video?: true | runtime.Types.Skip
  coachName?: true | runtime.Types.Skip
  specialOffer?: true | runtime.Types.Skip
  createdAt?: true | runtime.Types.Skip
  updatedAt?: true | runtime.Types.Skip
  coachId?: true | runtime.Types.Skip
}

export type TrainingCountAggregateInputType = {
  id?: true | runtime.Types.Skip
  title?: true | runtime.Types.Skip
  background?: true | runtime.Types.Skip
  level?: true | runtime.Types.Skip
  type?: true | runtime.Types.Skip
  trainingTime?: true | runtime.Types.Skip
  calorie?: true | runtime.Types.Skip
  gender?: true | runtime.Types.Skip
  rating?: true | runtime.Types.Skip
  description?: true | runtime.Types.Skip
  price?: true | runtime.Types.Skip
  video?: true | runtime.Types.Skip
  coachName?: true | runtime.Types.Skip
  specialOffer?: true | runtime.Types.Skip
  createdAt?: true | runtime.Types.Skip
  updatedAt?: true | runtime.Types.Skip
  coachId?: true | runtime.Types.Skip
  _all?: true | runtime.Types.Skip
}

export type TrainingAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which Training to aggregate.
   */
  where?: Prisma.TrainingWhereInput | runtime.Types.Skip
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Trainings to fetch.
   */
  orderBy?: Prisma.TrainingOrderByWithRelationInput | Prisma.TrainingOrderByWithRelationInput[] | runtime.Types.Skip
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.TrainingWhereUniqueInput | runtime.Types.Skip
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Trainings from the position of the cursor.
   */
  take?: number | runtime.Types.Skip
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Trainings.
   */
  skip?: number | runtime.Types.Skip
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned Trainings
  **/
  _count?: true | TrainingCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to average
  **/
  _avg?: TrainingAvgAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to sum
  **/
  _sum?: TrainingSumAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: TrainingMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: TrainingMaxAggregateInputType
}

export type GetTrainingAggregateType<T extends TrainingAggregateArgs> = {
      [P in keyof T & keyof AggregateTraining]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateTraining[P]>
    : Prisma.GetScalarType<T[P], AggregateTraining[P]>
}




export type TrainingGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.TrainingWhereInput | runtime.Types.Skip
  orderBy?: Prisma.TrainingOrderByWithAggregationInput | Prisma.TrainingOrderByWithAggregationInput[] | runtime.Types.Skip
  by: Prisma.TrainingScalarFieldEnum[] | Prisma.TrainingScalarFieldEnum
  having?: Prisma.TrainingScalarWhereWithAggregatesInput | runtime.Types.Skip
  take?: number | runtime.Types.Skip
  skip?: number | runtime.Types.Skip
  _count?: TrainingCountAggregateInputType | true
  _avg?: TrainingAvgAggregateInputType
  _sum?: TrainingSumAggregateInputType
  _min?: TrainingMinAggregateInputType
  _max?: TrainingMaxAggregateInputType
}

export type TrainingGroupByOutputType = {
  id: string
  title: string
  background: string
  level: $Enums.FitnessLevel
  type: $Enums.Exercise
  trainingTime: $Enums.TrainingTime
  calorie: number
  gender: $Enums.Gender
  rating: number
  description: string
  price: number
  video: string
  coachName: string
  specialOffer: boolean
  createdAt: Date
  updatedAt: Date
  coachId: string
  _count: TrainingCountAggregateOutputType | null
  _avg: TrainingAvgAggregateOutputType | null
  _sum: TrainingSumAggregateOutputType | null
  _min: TrainingMinAggregateOutputType | null
  _max: TrainingMaxAggregateOutputType | null
}

type GetTrainingGroupByPayload<T extends TrainingGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<TrainingGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof TrainingGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], TrainingGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], TrainingGroupByOutputType[P]>
      }
    >
  > 



export type TrainingWhereInput = {
  AND?: Prisma.TrainingWhereInput | Prisma.TrainingWhereInput[] | runtime.Types.Skip
  OR?: Prisma.TrainingWhereInput[] | runtime.Types.Skip
  NOT?: Prisma.TrainingWhereInput | Prisma.TrainingWhereInput[] | runtime.Types.Skip
  id?: Prisma.StringFilter<"Training"> | string | runtime.Types.Skip
  title?: Prisma.StringFilter<"Training"> | string | runtime.Types.Skip
  background?: Prisma.StringFilter<"Training"> | string | runtime.Types.Skip
  level?: Prisma.EnumFitnessLevelFilter<"Training"> | $Enums.FitnessLevel | runtime.Types.Skip
  type?: Prisma.EnumExerciseFilter<"Training"> | $Enums.Exercise | runtime.Types.Skip
  trainingTime?: Prisma.EnumTrainingTimeFilter<"Training"> | $Enums.TrainingTime | runtime.Types.Skip
  calorie?: Prisma.IntFilter<"Training"> | number | runtime.Types.Skip
  gender?: Prisma.EnumGenderFilter<"Training"> | $Enums.Gender | runtime.Types.Skip
  rating?: Prisma.IntFilter<"Training"> | number | runtime.Types.Skip
  description?: Prisma.StringFilter<"Training"> | string | runtime.Types.Skip
  price?: Prisma.IntFilter<"Training"> | number | runtime.Types.Skip
  video?: Prisma.StringFilter<"Training"> | string | runtime.Types.Skip
  coachName?: Prisma.StringFilter<"Training"> | string | runtime.Types.Skip
  specialOffer?: Prisma.BoolFilter<"Training"> | boolean | runtime.Types.Skip
  createdAt?: Prisma.DateTimeFilter<"Training"> | Date | string | runtime.Types.Skip
  updatedAt?: Prisma.DateTimeFilter<"Training"> | Date | string | runtime.Types.Skip
  coachId?: Prisma.StringFilter<"Training"> | string | runtime.Types.Skip
  coach?: Prisma.XOR<Prisma.UserScalarRelationFilter, Prisma.UserWhereInput> | runtime.Types.Skip
  feedbacks?: Prisma.FeedbackListRelationFilter | runtime.Types.Skip
  balances?: Prisma.BalanceListRelationFilter | runtime.Types.Skip
  orders?: Prisma.OrderListRelationFilter | runtime.Types.Skip
}

export type TrainingOrderByWithRelationInput = {
  id?: Prisma.SortOrder | runtime.Types.Skip
  title?: Prisma.SortOrder | runtime.Types.Skip
  background?: Prisma.SortOrder | runtime.Types.Skip
  level?: Prisma.SortOrder | runtime.Types.Skip
  type?: Prisma.SortOrder | runtime.Types.Skip
  trainingTime?: Prisma.SortOrder | runtime.Types.Skip
  calorie?: Prisma.SortOrder | runtime.Types.Skip
  gender?: Prisma.SortOrder | runtime.Types.Skip
  rating?: Prisma.SortOrder | runtime.Types.Skip
  description?: Prisma.SortOrder | runtime.Types.Skip
  price?: Prisma.SortOrder | runtime.Types.Skip
  video?: Prisma.SortOrder | runtime.Types.Skip
  coachName?: Prisma.SortOrder | runtime.Types.Skip
  specialOffer?: Prisma.SortOrder | runtime.Types.Skip
  createdAt?: Prisma.SortOrder | runtime.Types.Skip
  updatedAt?: Prisma.SortOrder | runtime.Types.Skip
  coachId?: Prisma.SortOrder | runtime.Types.Skip
  coach?: Prisma.UserOrderByWithRelationInput | runtime.Types.Skip
  feedbacks?: Prisma.FeedbackOrderByRelationAggregateInput | runtime.Types.Skip
  balances?: Prisma.BalanceOrderByRelationAggregateInput | runtime.Types.Skip
  orders?: Prisma.OrderOrderByRelationAggregateInput | runtime.Types.Skip
}

export type TrainingWhereUniqueInput = Prisma.AtLeast<{
  id?: string | runtime.Types.Skip
  AND?: Prisma.TrainingWhereInput | Prisma.TrainingWhereInput[] | runtime.Types.Skip
  OR?: Prisma.TrainingWhereInput[] | runtime.Types.Skip
  NOT?: Prisma.TrainingWhereInput | Prisma.TrainingWhereInput[] | runtime.Types.Skip
  title?: Prisma.StringFilter<"Training"> | string | runtime.Types.Skip
  background?: Prisma.StringFilter<"Training"> | string | runtime.Types.Skip
  level?: Prisma.EnumFitnessLevelFilter<"Training"> | $Enums.FitnessLevel | runtime.Types.Skip
  type?: Prisma.EnumExerciseFilter<"Training"> | $Enums.Exercise | runtime.Types.Skip
  trainingTime?: Prisma.EnumTrainingTimeFilter<"Training"> | $Enums.TrainingTime | runtime.Types.Skip
  calorie?: Prisma.IntFilter<"Training"> | number | runtime.Types.Skip
  gender?: Prisma.EnumGenderFilter<"Training"> | $Enums.Gender | runtime.Types.Skip
  rating?: Prisma.IntFilter<"Training"> | number | runtime.Types.Skip
  description?: Prisma.StringFilter<"Training"> | string | runtime.Types.Skip
  price?: Prisma.IntFilter<"Training"> | number | runtime.Types.Skip
  video?: Prisma.StringFilter<"Training"> | string | runtime.Types.Skip
  coachName?: Prisma.StringFilter<"Training"> | string | runtime.Types.Skip
  specialOffer?: Prisma.BoolFilter<"Training"> | boolean | runtime.Types.Skip
  createdAt?: Prisma.DateTimeFilter<"Training"> | Date | string | runtime.Types.Skip
  updatedAt?: Prisma.DateTimeFilter<"Training"> | Date | string | runtime.Types.Skip
  coachId?: Prisma.StringFilter<"Training"> | string | runtime.Types.Skip
  coach?: Prisma.XOR<Prisma.UserScalarRelationFilter, Prisma.UserWhereInput> | runtime.Types.Skip
  feedbacks?: Prisma.FeedbackListRelationFilter | runtime.Types.Skip
  balances?: Prisma.BalanceListRelationFilter | runtime.Types.Skip
  orders?: Prisma.OrderListRelationFilter | runtime.Types.Skip
}, "id">

export type TrainingOrderByWithAggregationInput = {
  id?: Prisma.SortOrder | runtime.Types.Skip
  title?: Prisma.SortOrder | runtime.Types.Skip
  background?: Prisma.SortOrder | runtime.Types.Skip
  level?: Prisma.SortOrder | runtime.Types.Skip
  type?: Prisma.SortOrder | runtime.Types.Skip
  trainingTime?: Prisma.SortOrder | runtime.Types.Skip
  calorie?: Prisma.SortOrder | runtime.Types.Skip
  gender?: Prisma.SortOrder | runtime.Types.Skip
  rating?: Prisma.SortOrder | runtime.Types.Skip
  description?: Prisma.SortOrder | runtime.Types.Skip
  price?: Prisma.SortOrder | runtime.Types.Skip
  video?: Prisma.SortOrder | runtime.Types.Skip
  coachName?: Prisma.SortOrder | runtime.Types.Skip
  specialOffer?: Prisma.SortOrder | runtime.Types.Skip
  createdAt?: Prisma.SortOrder | runtime.Types.Skip
  updatedAt?: Prisma.SortOrder | runtime.Types.Skip
  coachId?: Prisma.SortOrder | runtime.Types.Skip
  _count?: Prisma.TrainingCountOrderByAggregateInput | runtime.Types.Skip
  _avg?: Prisma.TrainingAvgOrderByAggregateInput | runtime.Types.Skip
  _max?: Prisma.TrainingMaxOrderByAggregateInput | runtime.Types.Skip
  _min?: Prisma.TrainingMinOrderByAggregateInput | runtime.Types.Skip
  _sum?: Prisma.TrainingSumOrderByAggregateInput | runtime.Types.Skip
}

export type TrainingScalarWhereWithAggregatesInput = {
  AND?: Prisma.TrainingScalarWhereWithAggregatesInput | Prisma.TrainingScalarWhereWithAggregatesInput[] | runtime.Types.Skip
  OR?: Prisma.TrainingScalarWhereWithAggregatesInput[] | runtime.Types.Skip
  NOT?: Prisma.TrainingScalarWhereWithAggregatesInput | Prisma.TrainingScalarWhereWithAggregatesInput[] | runtime.Types.Skip
  id?: Prisma.StringWithAggregatesFilter<"Training"> | string | runtime.Types.Skip
  title?: Prisma.StringWithAggregatesFilter<"Training"> | string | runtime.Types.Skip
  background?: Prisma.StringWithAggregatesFilter<"Training"> | string | runtime.Types.Skip
  level?: Prisma.EnumFitnessLevelWithAggregatesFilter<"Training"> | $Enums.FitnessLevel | runtime.Types.Skip
  type?: Prisma.EnumExerciseWithAggregatesFilter<"Training"> | $Enums.Exercise | runtime.Types.Skip
  trainingTime?: Prisma.EnumTrainingTimeWithAggregatesFilter<"Training"> | $Enums.TrainingTime | runtime.Types.Skip
  calorie?: Prisma.IntWithAggregatesFilter<"Training"> | number | runtime.Types.Skip
  gender?: Prisma.EnumGenderWithAggregatesFilter<"Training"> | $Enums.Gender | runtime.Types.Skip
  rating?: Prisma.IntWithAggregatesFilter<"Training"> | number | runtime.Types.Skip
  description?: Prisma.StringWithAggregatesFilter<"Training"> | string | runtime.Types.Skip
  price?: Prisma.IntWithAggregatesFilter<"Training"> | number | runtime.Types.Skip
  video?: Prisma.StringWithAggregatesFilter<"Training"> | string | runtime.Types.Skip
  coachName?: Prisma.StringWithAggregatesFilter<"Training"> | string | runtime.Types.Skip
  specialOffer?: Prisma.BoolWithAggregatesFilter<"Training"> | boolean | runtime.Types.Skip
  createdAt?: Prisma.DateTimeWithAggregatesFilter<"Training"> | Date | string | runtime.Types.Skip
  updatedAt?: Prisma.DateTimeWithAggregatesFilter<"Training"> | Date | string | runtime.Types.Skip
  coachId?: Prisma.StringWithAggregatesFilter<"Training"> | string | runtime.Types.Skip
}

export type TrainingCreateInput = {
  id?: string | runtime.Types.Skip
  title: string
  background: string
  level: $Enums.FitnessLevel
  type: $Enums.Exercise
  trainingTime: $Enums.TrainingTime
  calorie?: number | runtime.Types.Skip
  gender: $Enums.Gender
  rating?: number | runtime.Types.Skip
  description: string
  price?: number | runtime.Types.Skip
  video: string
  coachName: string
  specialOffer?: boolean | runtime.Types.Skip
  createdAt?: Date | string | runtime.Types.Skip
  updatedAt?: Date | string | runtime.Types.Skip
  coach: Prisma.UserCreateNestedOneWithoutTrainingsInput
  feedbacks?: Prisma.FeedbackCreateNestedManyWithoutTrainingInput | runtime.Types.Skip
  balances?: Prisma.BalanceCreateNestedManyWithoutTrainingInput | runtime.Types.Skip
  orders?: Prisma.OrderCreateNestedManyWithoutTrainingInput | runtime.Types.Skip
}

export type TrainingUncheckedCreateInput = {
  id?: string | runtime.Types.Skip
  title: string
  background: string
  level: $Enums.FitnessLevel
  type: $Enums.Exercise
  trainingTime: $Enums.TrainingTime
  calorie?: number | runtime.Types.Skip
  gender: $Enums.Gender
  rating?: number | runtime.Types.Skip
  description: string
  price?: number | runtime.Types.Skip
  video: string
  coachName: string
  specialOffer?: boolean | runtime.Types.Skip
  createdAt?: Date | string | runtime.Types.Skip
  updatedAt?: Date | string | runtime.Types.Skip
  coachId: string
  feedbacks?: Prisma.FeedbackUncheckedCreateNestedManyWithoutTrainingInput | runtime.Types.Skip
  balances?: Prisma.BalanceUncheckedCreateNestedManyWithoutTrainingInput | runtime.Types.Skip
  orders?: Prisma.OrderUncheckedCreateNestedManyWithoutTrainingInput | runtime.Types.Skip
}

export type TrainingUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string | runtime.Types.Skip
  title?: Prisma.StringFieldUpdateOperationsInput | string | runtime.Types.Skip
  background?: Prisma.StringFieldUpdateOperationsInput | string | runtime.Types.Skip
  level?: Prisma.EnumFitnessLevelFieldUpdateOperationsInput | $Enums.FitnessLevel | runtime.Types.Skip
  type?: Prisma.EnumExerciseFieldUpdateOperationsInput | $Enums.Exercise | runtime.Types.Skip
  trainingTime?: Prisma.EnumTrainingTimeFieldUpdateOperationsInput | $Enums.TrainingTime | runtime.Types.Skip
  calorie?: Prisma.IntFieldUpdateOperationsInput | number | runtime.Types.Skip
  gender?: Prisma.EnumGenderFieldUpdateOperationsInput | $Enums.Gender | runtime.Types.Skip
  rating?: Prisma.IntFieldUpdateOperationsInput | number | runtime.Types.Skip
  description?: Prisma.StringFieldUpdateOperationsInput | string | runtime.Types.Skip
  price?: Prisma.IntFieldUpdateOperationsInput | number | runtime.Types.Skip
  video?: Prisma.StringFieldUpdateOperationsInput | string | runtime.Types.Skip
  coachName?: Prisma.StringFieldUpdateOperationsInput | string | runtime.Types.Skip
  specialOffer?: Prisma.BoolFieldUpdateOperationsInput | boolean | runtime.Types.Skip
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string | runtime.Types.Skip
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string | runtime.Types.Skip
  coach?: Prisma.UserUpdateOneRequiredWithoutTrainingsNestedInput | runtime.Types.Skip
  feedbacks?: Prisma.FeedbackUpdateManyWithoutTrainingNestedInput | runtime.Types.Skip
  balances?: Prisma.BalanceUpdateManyWithoutTrainingNestedInput | runtime.Types.Skip
  orders?: Prisma.OrderUpdateManyWithoutTrainingNestedInput | runtime.Types.Skip
}

export type TrainingUncheckedUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string | runtime.Types.Skip
  title?: Prisma.StringFieldUpdateOperationsInput | string | runtime.Types.Skip
  background?: Prisma.StringFieldUpdateOperationsInput | string | runtime.Types.Skip
  level?: Prisma.EnumFitnessLevelFieldUpdateOperationsInput | $Enums.FitnessLevel | runtime.Types.Skip
  type?: Prisma.EnumExerciseFieldUpdateOperationsInput | $Enums.Exercise | runtime.Types.Skip
  trainingTime?: Prisma.EnumTrainingTimeFieldUpdateOperationsInput | $Enums.TrainingTime | runtime.Types.Skip
  calorie?: Prisma.IntFieldUpdateOperationsInput | number | runtime.Types.Skip
  gender?: Prisma.EnumGenderFieldUpdateOperationsInput | $Enums.Gender | runtime.Types.Skip
  rating?: Prisma.IntFieldUpdateOperationsInput | number | runtime.Types.Skip
  description?: Prisma.StringFieldUpdateOperationsInput | string | runtime.Types.Skip
  price?: Prisma.IntFieldUpdateOperationsInput | number | runtime.Types.Skip
  video?: Prisma.StringFieldUpdateOperationsInput | string | runtime.Types.Skip
  coachName?: Prisma.StringFieldUpdateOperationsInput | string | runtime.Types.Skip
  specialOffer?: Prisma.BoolFieldUpdateOperationsInput | boolean | runtime.Types.Skip
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string | runtime.Types.Skip
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string | runtime.Types.Skip
  coachId?: Prisma.StringFieldUpdateOperationsInput | string | runtime.Types.Skip
  feedbacks?: Prisma.FeedbackUncheckedUpdateManyWithoutTrainingNestedInput | runtime.Types.Skip
  balances?: Prisma.BalanceUncheckedUpdateManyWithoutTrainingNestedInput | runtime.Types.Skip
  orders?: Prisma.OrderUncheckedUpdateManyWithoutTrainingNestedInput | runtime.Types.Skip
}

export type TrainingCreateManyInput = {
  id?: string | runtime.Types.Skip
  title: string
  background: string
  level: $Enums.FitnessLevel
  type: $Enums.Exercise
  trainingTime: $Enums.TrainingTime
  calorie?: number | runtime.Types.Skip
  gender: $Enums.Gender
  rating?: number | runtime.Types.Skip
  description: string
  price?: number | runtime.Types.Skip
  video: string
  coachName: string
  specialOffer?: boolean | runtime.Types.Skip
  createdAt?: Date | string | runtime.Types.Skip
  updatedAt?: Date | string | runtime.Types.Skip
  coachId: string
}

export type TrainingUpdateManyMutationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string | runtime.Types.Skip
  title?: Prisma.StringFieldUpdateOperationsInput | string | runtime.Types.Skip
  background?: Prisma.StringFieldUpdateOperationsInput | string | runtime.Types.Skip
  level?: Prisma.EnumFitnessLevelFieldUpdateOperationsInput | $Enums.FitnessLevel | runtime.Types.Skip
  type?: Prisma.EnumExerciseFieldUpdateOperationsInput | $Enums.Exercise | runtime.Types.Skip
  trainingTime?: Prisma.EnumTrainingTimeFieldUpdateOperationsInput | $Enums.TrainingTime | runtime.Types.Skip
  calorie?: Prisma.IntFieldUpdateOperationsInput | number | runtime.Types.Skip
  gender?: Prisma.EnumGenderFieldUpdateOperationsInput | $Enums.Gender | runtime.Types.Skip
  rating?: Prisma.IntFieldUpdateOperationsInput | number | runtime.Types.Skip
  description?: Prisma.StringFieldUpdateOperationsInput | string | runtime.Types.Skip
  price?: Prisma.IntFieldUpdateOperationsInput | number | runtime.Types.Skip
  video?: Prisma.StringFieldUpdateOperationsInput | string | runtime.Types.Skip
  coachName?: Prisma.StringFieldUpdateOperationsInput | string | runtime.Types.Skip
  specialOffer?: Prisma.BoolFieldUpdateOperationsInput | boolean | runtime.Types.Skip
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string | runtime.Types.Skip
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string | runtime.Types.Skip
}

export type TrainingUncheckedUpdateManyInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string | runtime.Types.Skip
  title?: Prisma.StringFieldUpdateOperationsInput | string | runtime.Types.Skip
  background?: Prisma.StringFieldUpdateOperationsInput | string | runtime.Types.Skip
  level?: Prisma.EnumFitnessLevelFieldUpdateOperationsInput | $Enums.FitnessLevel | runtime.Types.Skip
  type?: Prisma.EnumExerciseFieldUpdateOperationsInput | $Enums.Exercise | runtime.Types.Skip
  trainingTime?: Prisma.EnumTrainingTimeFieldUpdateOperationsInput | $Enums.TrainingTime | runtime.Types.Skip
  calorie?: Prisma.IntFieldUpdateOperationsInput | number | runtime.Types.Skip
  gender?: Prisma.EnumGenderFieldUpdateOperationsInput | $Enums.Gender | runtime.Types.Skip
  rating?: Prisma.IntFieldUpdateOperationsInput | number | runtime.Types.Skip
  description?: Prisma.StringFieldUpdateOperationsInput | string | runtime.Types.Skip
  price?: Prisma.IntFieldUpdateOperationsInput | number | runtime.Types.Skip
  video?: Prisma.StringFieldUpdateOperationsInput | string | runtime.Types.Skip
  coachName?: Prisma.StringFieldUpdateOperationsInput | string | runtime.Types.Skip
  specialOffer?: Prisma.BoolFieldUpdateOperationsInput | boolean | runtime.Types.Skip
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string | runtime.Types.Skip
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string | runtime.Types.Skip
  coachId?: Prisma.StringFieldUpdateOperationsInput | string | runtime.Types.Skip
}

export type TrainingListRelationFilter = {
  every?: Prisma.TrainingWhereInput | runtime.Types.Skip
  some?: Prisma.TrainingWhereInput | runtime.Types.Skip
  none?: Prisma.TrainingWhereInput | runtime.Types.Skip
}

export type TrainingOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder | runtime.Types.Skip
}

export type TrainingCountOrderByAggregateInput = {
  id?: Prisma.SortOrder | runtime.Types.Skip
  title?: Prisma.SortOrder | runtime.Types.Skip
  background?: Prisma.SortOrder | runtime.Types.Skip
  level?: Prisma.SortOrder | runtime.Types.Skip
  type?: Prisma.SortOrder | runtime.Types.Skip
  trainingTime?: Prisma.SortOrder | runtime.Types.Skip
  calorie?: Prisma.SortOrder | runtime.Types.Skip
  gender?: Prisma.SortOrder | runtime.Types.Skip
  rating?: Prisma.SortOrder | runtime.Types.Skip
  description?: Prisma.SortOrder | runtime.Types.Skip
  price?: Prisma.SortOrder | runtime.Types.Skip
  video?: Prisma.SortOrder | runtime.Types.Skip
  coachName?: Prisma.SortOrder | runtime.Types.Skip
  specialOffer?: Prisma.SortOrder | runtime.Types.Skip
  createdAt?: Prisma.SortOrder | runtime.Types.Skip
  updatedAt?: Prisma.SortOrder | runtime.Types.Skip
  coachId?: Prisma.SortOrder | runtime.Types.Skip
}

export type TrainingAvgOrderByAggregateInput = {
  calorie?: Prisma.SortOrder | runtime.Types.Skip
  rating?: Prisma.SortOrder | runtime.Types.Skip
  price?: Prisma.SortOrder | runtime.Types.Skip
}

export type TrainingMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder | runtime.Types.Skip
  title?: Prisma.SortOrder | runtime.Types.Skip
  background?: Prisma.SortOrder | runtime.Types.Skip
  level?: Prisma.SortOrder | runtime.Types.Skip
  type?: Prisma.SortOrder | runtime.Types.Skip
  trainingTime?: Prisma.SortOrder | runtime.Types.Skip
  calorie?: Prisma.SortOrder | runtime.Types.Skip
  gender?: Prisma.SortOrder | runtime.Types.Skip
  rating?: Prisma.SortOrder | runtime.Types.Skip
  description?: Prisma.SortOrder | runtime.Types.Skip
  price?: Prisma.SortOrder | runtime.Types.Skip
  video?: Prisma.SortOrder | runtime.Types.Skip
  coachName?: Prisma.SortOrder | runtime.Types.Skip
  specialOffer?: Prisma.SortOrder | runtime.Types.Skip
  createdAt?: Prisma.SortOrder | runtime.Types.Skip
  updatedAt?: Prisma.SortOrder | runtime.Types.Skip
  coachId?: Prisma.SortOrder | runtime.Types.Skip
}

export type TrainingMinOrderByAggregateInput = {
  id?: Prisma.SortOrder | runtime.Types.Skip
  title?: Prisma.SortOrder | runtime.Types.Skip
  background?: Prisma.SortOrder | runtime.Types.Skip
  level?: Prisma.SortOrder | runtime.Types.Skip
  type?: Prisma.SortOrder | runtime.Types.Skip
  trainingTime?: Prisma.SortOrder | runtime.Types.Skip
  calorie?: Prisma.SortOrder | runtime.Types.Skip
  gender?: Prisma.SortOrder | runtime.Types.Skip
  rating?: Prisma.SortOrder | runtime.Types.Skip
  description?: Prisma.SortOrder | runtime.Types.Skip
  price?: Prisma.SortOrder | runtime.Types.Skip
  video?: Prisma.SortOrder | runtime.Types.Skip
  coachName?: Prisma.SortOrder | runtime.Types.Skip
  specialOffer?: Prisma.SortOrder | runtime.Types.Skip
  createdAt?: Prisma.SortOrder | runtime.Types.Skip
  updatedAt?: Prisma.SortOrder | runtime.Types.Skip
  coachId?: Prisma.SortOrder | runtime.Types.Skip
}

export type TrainingSumOrderByAggregateInput = {
  calorie?: Prisma.SortOrder | runtime.Types.Skip
  rating?: Prisma.SortOrder | runtime.Types.Skip
  price?: Prisma.SortOrder | runtime.Types.Skip
}

export type TrainingScalarRelationFilter = {
  is?: Prisma.TrainingWhereInput | runtime.Types.Skip
  isNot?: Prisma.TrainingWhereInput | runtime.Types.Skip
}

export type TrainingCreateNestedManyWithoutCoachInput = {
  create?: Prisma.XOR<Prisma.TrainingCreateWithoutCoachInput, Prisma.TrainingUncheckedCreateWithoutCoachInput> | Prisma.TrainingCreateWithoutCoachInput[] | Prisma.TrainingUncheckedCreateWithoutCoachInput[] | runtime.Types.Skip
  connectOrCreate?: Prisma.TrainingCreateOrConnectWithoutCoachInput | Prisma.TrainingCreateOrConnectWithoutCoachInput[] | runtime.Types.Skip
  createMany?: Prisma.TrainingCreateManyCoachInputEnvelope | runtime.Types.Skip
  connect?: Prisma.TrainingWhereUniqueInput | Prisma.TrainingWhereUniqueInput[] | runtime.Types.Skip
}

export type TrainingUncheckedCreateNestedManyWithoutCoachInput = {
  create?: Prisma.XOR<Prisma.TrainingCreateWithoutCoachInput, Prisma.TrainingUncheckedCreateWithoutCoachInput> | Prisma.TrainingCreateWithoutCoachInput[] | Prisma.TrainingUncheckedCreateWithoutCoachInput[] | runtime.Types.Skip
  connectOrCreate?: Prisma.TrainingCreateOrConnectWithoutCoachInput | Prisma.TrainingCreateOrConnectWithoutCoachInput[] | runtime.Types.Skip
  createMany?: Prisma.TrainingCreateManyCoachInputEnvelope | runtime.Types.Skip
  connect?: Prisma.TrainingWhereUniqueInput | Prisma.TrainingWhereUniqueInput[] | runtime.Types.Skip
}

export type TrainingUpdateManyWithoutCoachNestedInput = {
  create?: Prisma.XOR<Prisma.TrainingCreateWithoutCoachInput, Prisma.TrainingUncheckedCreateWithoutCoachInput> | Prisma.TrainingCreateWithoutCoachInput[] | Prisma.TrainingUncheckedCreateWithoutCoachInput[] | runtime.Types.Skip
  connectOrCreate?: Prisma.TrainingCreateOrConnectWithoutCoachInput | Prisma.TrainingCreateOrConnectWithoutCoachInput[] | runtime.Types.Skip
  upsert?: Prisma.TrainingUpsertWithWhereUniqueWithoutCoachInput | Prisma.TrainingUpsertWithWhereUniqueWithoutCoachInput[] | runtime.Types.Skip
  createMany?: Prisma.TrainingCreateManyCoachInputEnvelope | runtime.Types.Skip
  set?: Prisma.TrainingWhereUniqueInput | Prisma.TrainingWhereUniqueInput[] | runtime.Types.Skip
  disconnect?: Prisma.TrainingWhereUniqueInput | Prisma.TrainingWhereUniqueInput[] | runtime.Types.Skip
  delete?: Prisma.TrainingWhereUniqueInput | Prisma.TrainingWhereUniqueInput[] | runtime.Types.Skip
  connect?: Prisma.TrainingWhereUniqueInput | Prisma.TrainingWhereUniqueInput[] | runtime.Types.Skip
  update?: Prisma.TrainingUpdateWithWhereUniqueWithoutCoachInput | Prisma.TrainingUpdateWithWhereUniqueWithoutCoachInput[] | runtime.Types.Skip
  updateMany?: Prisma.TrainingUpdateManyWithWhereWithoutCoachInput | Prisma.TrainingUpdateManyWithWhereWithoutCoachInput[] | runtime.Types.Skip
  deleteMany?: Prisma.TrainingScalarWhereInput | Prisma.TrainingScalarWhereInput[] | runtime.Types.Skip
}

export type TrainingUncheckedUpdateManyWithoutCoachNestedInput = {
  create?: Prisma.XOR<Prisma.TrainingCreateWithoutCoachInput, Prisma.TrainingUncheckedCreateWithoutCoachInput> | Prisma.TrainingCreateWithoutCoachInput[] | Prisma.TrainingUncheckedCreateWithoutCoachInput[] | runtime.Types.Skip
  connectOrCreate?: Prisma.TrainingCreateOrConnectWithoutCoachInput | Prisma.TrainingCreateOrConnectWithoutCoachInput[] | runtime.Types.Skip
  upsert?: Prisma.TrainingUpsertWithWhereUniqueWithoutCoachInput | Prisma.TrainingUpsertWithWhereUniqueWithoutCoachInput[] | runtime.Types.Skip
  createMany?: Prisma.TrainingCreateManyCoachInputEnvelope | runtime.Types.Skip
  set?: Prisma.TrainingWhereUniqueInput | Prisma.TrainingWhereUniqueInput[] | runtime.Types.Skip
  disconnect?: Prisma.TrainingWhereUniqueInput | Prisma.TrainingWhereUniqueInput[] | runtime.Types.Skip
  delete?: Prisma.TrainingWhereUniqueInput | Prisma.TrainingWhereUniqueInput[] | runtime.Types.Skip
  connect?: Prisma.TrainingWhereUniqueInput | Prisma.TrainingWhereUniqueInput[] | runtime.Types.Skip
  update?: Prisma.TrainingUpdateWithWhereUniqueWithoutCoachInput | Prisma.TrainingUpdateWithWhereUniqueWithoutCoachInput[] | runtime.Types.Skip
  updateMany?: Prisma.TrainingUpdateManyWithWhereWithoutCoachInput | Prisma.TrainingUpdateManyWithWhereWithoutCoachInput[] | runtime.Types.Skip
  deleteMany?: Prisma.TrainingScalarWhereInput | Prisma.TrainingScalarWhereInput[] | runtime.Types.Skip
}

export type EnumFitnessLevelFieldUpdateOperationsInput = {
  set?: $Enums.FitnessLevel | runtime.Types.Skip
}

export type EnumExerciseFieldUpdateOperationsInput = {
  set?: $Enums.Exercise | runtime.Types.Skip
}

export type EnumTrainingTimeFieldUpdateOperationsInput = {
  set?: $Enums.TrainingTime | runtime.Types.Skip
}

export type IntFieldUpdateOperationsInput = {
  set?: number | runtime.Types.Skip
  increment?: number | runtime.Types.Skip
  decrement?: number | runtime.Types.Skip
  multiply?: number | runtime.Types.Skip
  divide?: number | runtime.Types.Skip
}

export type TrainingCreateNestedOneWithoutBalancesInput = {
  create?: Prisma.XOR<Prisma.TrainingCreateWithoutBalancesInput, Prisma.TrainingUncheckedCreateWithoutBalancesInput> | runtime.Types.Skip
  connectOrCreate?: Prisma.TrainingCreateOrConnectWithoutBalancesInput | runtime.Types.Skip
  connect?: Prisma.TrainingWhereUniqueInput | runtime.Types.Skip
}

export type TrainingUpdateOneRequiredWithoutBalancesNestedInput = {
  create?: Prisma.XOR<Prisma.TrainingCreateWithoutBalancesInput, Prisma.TrainingUncheckedCreateWithoutBalancesInput> | runtime.Types.Skip
  connectOrCreate?: Prisma.TrainingCreateOrConnectWithoutBalancesInput | runtime.Types.Skip
  upsert?: Prisma.TrainingUpsertWithoutBalancesInput | runtime.Types.Skip
  connect?: Prisma.TrainingWhereUniqueInput | runtime.Types.Skip
  update?: Prisma.XOR<Prisma.XOR<Prisma.TrainingUpdateToOneWithWhereWithoutBalancesInput, Prisma.TrainingUpdateWithoutBalancesInput>, Prisma.TrainingUncheckedUpdateWithoutBalancesInput> | runtime.Types.Skip
}

export type TrainingCreateNestedOneWithoutOrdersInput = {
  create?: Prisma.XOR<Prisma.TrainingCreateWithoutOrdersInput, Prisma.TrainingUncheckedCreateWithoutOrdersInput> | runtime.Types.Skip
  connectOrCreate?: Prisma.TrainingCreateOrConnectWithoutOrdersInput | runtime.Types.Skip
  connect?: Prisma.TrainingWhereUniqueInput | runtime.Types.Skip
}

export type TrainingUpdateOneRequiredWithoutOrdersNestedInput = {
  create?: Prisma.XOR<Prisma.TrainingCreateWithoutOrdersInput, Prisma.TrainingUncheckedCreateWithoutOrdersInput> | runtime.Types.Skip
  connectOrCreate?: Prisma.TrainingCreateOrConnectWithoutOrdersInput | runtime.Types.Skip
  upsert?: Prisma.TrainingUpsertWithoutOrdersInput | runtime.Types.Skip
  connect?: Prisma.TrainingWhereUniqueInput | runtime.Types.Skip
  update?: Prisma.XOR<Prisma.XOR<Prisma.TrainingUpdateToOneWithWhereWithoutOrdersInput, Prisma.TrainingUpdateWithoutOrdersInput>, Prisma.TrainingUncheckedUpdateWithoutOrdersInput> | runtime.Types.Skip
}

export type TrainingCreateNestedOneWithoutFeedbacksInput = {
  create?: Prisma.XOR<Prisma.TrainingCreateWithoutFeedbacksInput, Prisma.TrainingUncheckedCreateWithoutFeedbacksInput> | runtime.Types.Skip
  connectOrCreate?: Prisma.TrainingCreateOrConnectWithoutFeedbacksInput | runtime.Types.Skip
  connect?: Prisma.TrainingWhereUniqueInput | runtime.Types.Skip
}

export type TrainingUpdateOneRequiredWithoutFeedbacksNestedInput = {
  create?: Prisma.XOR<Prisma.TrainingCreateWithoutFeedbacksInput, Prisma.TrainingUncheckedCreateWithoutFeedbacksInput> | runtime.Types.Skip
  connectOrCreate?: Prisma.TrainingCreateOrConnectWithoutFeedbacksInput | runtime.Types.Skip
  upsert?: Prisma.TrainingUpsertWithoutFeedbacksInput | runtime.Types.Skip
  connect?: Prisma.TrainingWhereUniqueInput | runtime.Types.Skip
  update?: Prisma.XOR<Prisma.XOR<Prisma.TrainingUpdateToOneWithWhereWithoutFeedbacksInput, Prisma.TrainingUpdateWithoutFeedbacksInput>, Prisma.TrainingUncheckedUpdateWithoutFeedbacksInput> | runtime.Types.Skip
}

export type TrainingCreateWithoutCoachInput = {
  id?: string | runtime.Types.Skip
  title: string
  background: string
  level: $Enums.FitnessLevel
  type: $Enums.Exercise
  trainingTime: $Enums.TrainingTime
  calorie?: number | runtime.Types.Skip
  gender: $Enums.Gender
  rating?: number | runtime.Types.Skip
  description: string
  price?: number | runtime.Types.Skip
  video: string
  coachName: string
  specialOffer?: boolean | runtime.Types.Skip
  createdAt?: Date | string | runtime.Types.Skip
  updatedAt?: Date | string | runtime.Types.Skip
  feedbacks?: Prisma.FeedbackCreateNestedManyWithoutTrainingInput | runtime.Types.Skip
  balances?: Prisma.BalanceCreateNestedManyWithoutTrainingInput | runtime.Types.Skip
  orders?: Prisma.OrderCreateNestedManyWithoutTrainingInput | runtime.Types.Skip
}

export type TrainingUncheckedCreateWithoutCoachInput = {
  id?: string | runtime.Types.Skip
  title: string
  background: string
  level: $Enums.FitnessLevel
  type: $Enums.Exercise
  trainingTime: $Enums.TrainingTime
  calorie?: number | runtime.Types.Skip
  gender: $Enums.Gender
  rating?: number | runtime.Types.Skip
  description: string
  price?: number | runtime.Types.Skip
  video: string
  coachName: string
  specialOffer?: boolean | runtime.Types.Skip
  createdAt?: Date | string | runtime.Types.Skip
  updatedAt?: Date | string | runtime.Types.Skip
  feedbacks?: Prisma.FeedbackUncheckedCreateNestedManyWithoutTrainingInput | runtime.Types.Skip
  balances?: Prisma.BalanceUncheckedCreateNestedManyWithoutTrainingInput | runtime.Types.Skip
  orders?: Prisma.OrderUncheckedCreateNestedManyWithoutTrainingInput | runtime.Types.Skip
}

export type TrainingCreateOrConnectWithoutCoachInput = {
  where: Prisma.TrainingWhereUniqueInput
  create: Prisma.XOR<Prisma.TrainingCreateWithoutCoachInput, Prisma.TrainingUncheckedCreateWithoutCoachInput>
}

export type TrainingCreateManyCoachInputEnvelope = {
  data: Prisma.TrainingCreateManyCoachInput | Prisma.TrainingCreateManyCoachInput[]
  skipDuplicates?: boolean | runtime.Types.Skip
}

export type TrainingUpsertWithWhereUniqueWithoutCoachInput = {
  where: Prisma.TrainingWhereUniqueInput
  update: Prisma.XOR<Prisma.TrainingUpdateWithoutCoachInput, Prisma.TrainingUncheckedUpdateWithoutCoachInput>
  create: Prisma.XOR<Prisma.TrainingCreateWithoutCoachInput, Prisma.TrainingUncheckedCreateWithoutCoachInput>
}

export type TrainingUpdateWithWhereUniqueWithoutCoachInput = {
  where: Prisma.TrainingWhereUniqueInput
  data: Prisma.XOR<Prisma.TrainingUpdateWithoutCoachInput, Prisma.TrainingUncheckedUpdateWithoutCoachInput>
}

export type TrainingUpdateManyWithWhereWithoutCoachInput = {
  where: Prisma.TrainingScalarWhereInput
  data: Prisma.XOR<Prisma.TrainingUpdateManyMutationInput, Prisma.TrainingUncheckedUpdateManyWithoutCoachInput>
}

export type TrainingScalarWhereInput = {
  AND?: Prisma.TrainingScalarWhereInput | Prisma.TrainingScalarWhereInput[] | runtime.Types.Skip
  OR?: Prisma.TrainingScalarWhereInput[] | runtime.Types.Skip
  NOT?: Prisma.TrainingScalarWhereInput | Prisma.TrainingScalarWhereInput[] | runtime.Types.Skip
  id?: Prisma.StringFilter<"Training"> | string | runtime.Types.Skip
  title?: Prisma.StringFilter<"Training"> | string | runtime.Types.Skip
  background?: Prisma.StringFilter<"Training"> | string | runtime.Types.Skip
  level?: Prisma.EnumFitnessLevelFilter<"Training"> | $Enums.FitnessLevel | runtime.Types.Skip
  type?: Prisma.EnumExerciseFilter<"Training"> | $Enums.Exercise | runtime.Types.Skip
  trainingTime?: Prisma.EnumTrainingTimeFilter<"Training"> | $Enums.TrainingTime | runtime.Types.Skip
  calorie?: Prisma.IntFilter<"Training"> | number | runtime.Types.Skip
  gender?: Prisma.EnumGenderFilter<"Training"> | $Enums.Gender | runtime.Types.Skip
  rating?: Prisma.IntFilter<"Training"> | number | runtime.Types.Skip
  description?: Prisma.StringFilter<"Training"> | string | runtime.Types.Skip
  price?: Prisma.IntFilter<"Training"> | number | runtime.Types.Skip
  video?: Prisma.StringFilter<"Training"> | string | runtime.Types.Skip
  coachName?: Prisma.StringFilter<"Training"> | string | runtime.Types.Skip
  specialOffer?: Prisma.BoolFilter<"Training"> | boolean | runtime.Types.Skip
  createdAt?: Prisma.DateTimeFilter<"Training"> | Date | string | runtime.Types.Skip
  updatedAt?: Prisma.DateTimeFilter<"Training"> | Date | string | runtime.Types.Skip
  coachId?: Prisma.StringFilter<"Training"> | string | runtime.Types.Skip
}

export type TrainingCreateWithoutBalancesInput = {
  id?: string | runtime.Types.Skip
  title: string
  background: string
  level: $Enums.FitnessLevel
  type: $Enums.Exercise
  trainingTime: $Enums.TrainingTime
  calorie?: number | runtime.Types.Skip
  gender: $Enums.Gender
  rating?: number | runtime.Types.Skip
  description: string
  price?: number | runtime.Types.Skip
  video: string
  coachName: string
  specialOffer?: boolean | runtime.Types.Skip
  createdAt?: Date | string | runtime.Types.Skip
  updatedAt?: Date | string | runtime.Types.Skip
  coach: Prisma.UserCreateNestedOneWithoutTrainingsInput
  feedbacks?: Prisma.FeedbackCreateNestedManyWithoutTrainingInput | runtime.Types.Skip
  orders?: Prisma.OrderCreateNestedManyWithoutTrainingInput | runtime.Types.Skip
}

export type TrainingUncheckedCreateWithoutBalancesInput = {
  id?: string | runtime.Types.Skip
  title: string
  background: string
  level: $Enums.FitnessLevel
  type: $Enums.Exercise
  trainingTime: $Enums.TrainingTime
  calorie?: number | runtime.Types.Skip
  gender: $Enums.Gender
  rating?: number | runtime.Types.Skip
  description: string
  price?: number | runtime.Types.Skip
  video: string
  coachName: string
  specialOffer?: boolean | runtime.Types.Skip
  createdAt?: Date | string | runtime.Types.Skip
  updatedAt?: Date | string | runtime.Types.Skip
  coachId: string
  feedbacks?: Prisma.FeedbackUncheckedCreateNestedManyWithoutTrainingInput | runtime.Types.Skip
  orders?: Prisma.OrderUncheckedCreateNestedManyWithoutTrainingInput | runtime.Types.Skip
}

export type TrainingCreateOrConnectWithoutBalancesInput = {
  where: Prisma.TrainingWhereUniqueInput
  create: Prisma.XOR<Prisma.TrainingCreateWithoutBalancesInput, Prisma.TrainingUncheckedCreateWithoutBalancesInput>
}

export type TrainingUpsertWithoutBalancesInput = {
  update: Prisma.XOR<Prisma.TrainingUpdateWithoutBalancesInput, Prisma.TrainingUncheckedUpdateWithoutBalancesInput>
  create: Prisma.XOR<Prisma.TrainingCreateWithoutBalancesInput, Prisma.TrainingUncheckedCreateWithoutBalancesInput>
  where?: Prisma.TrainingWhereInput | runtime.Types.Skip
}

export type TrainingUpdateToOneWithWhereWithoutBalancesInput = {
  where?: Prisma.TrainingWhereInput | runtime.Types.Skip
  data: Prisma.XOR<Prisma.TrainingUpdateWithoutBalancesInput, Prisma.TrainingUncheckedUpdateWithoutBalancesInput>
}

export type TrainingUpdateWithoutBalancesInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string | runtime.Types.Skip
  title?: Prisma.StringFieldUpdateOperationsInput | string | runtime.Types.Skip
  background?: Prisma.StringFieldUpdateOperationsInput | string | runtime.Types.Skip
  level?: Prisma.EnumFitnessLevelFieldUpdateOperationsInput | $Enums.FitnessLevel | runtime.Types.Skip
  type?: Prisma.EnumExerciseFieldUpdateOperationsInput | $Enums.Exercise | runtime.Types.Skip
  trainingTime?: Prisma.EnumTrainingTimeFieldUpdateOperationsInput | $Enums.TrainingTime | runtime.Types.Skip
  calorie?: Prisma.IntFieldUpdateOperationsInput | number | runtime.Types.Skip
  gender?: Prisma.EnumGenderFieldUpdateOperationsInput | $Enums.Gender | runtime.Types.Skip
  rating?: Prisma.IntFieldUpdateOperationsInput | number | runtime.Types.Skip
  description?: Prisma.StringFieldUpdateOperationsInput | string | runtime.Types.Skip
  price?: Prisma.IntFieldUpdateOperationsInput | number | runtime.Types.Skip
  video?: Prisma.StringFieldUpdateOperationsInput | string | runtime.Types.Skip
  coachName?: Prisma.StringFieldUpdateOperationsInput | string | runtime.Types.Skip
  specialOffer?: Prisma.BoolFieldUpdateOperationsInput | boolean | runtime.Types.Skip
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string | runtime.Types.Skip
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string | runtime.Types.Skip
  coach?: Prisma.UserUpdateOneRequiredWithoutTrainingsNestedInput | runtime.Types.Skip
  feedbacks?: Prisma.FeedbackUpdateManyWithoutTrainingNestedInput | runtime.Types.Skip
  orders?: Prisma.OrderUpdateManyWithoutTrainingNestedInput | runtime.Types.Skip
}

export type TrainingUncheckedUpdateWithoutBalancesInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string | runtime.Types.Skip
  title?: Prisma.StringFieldUpdateOperationsInput | string | runtime.Types.Skip
  background?: Prisma.StringFieldUpdateOperationsInput | string | runtime.Types.Skip
  level?: Prisma.EnumFitnessLevelFieldUpdateOperationsInput | $Enums.FitnessLevel | runtime.Types.Skip
  type?: Prisma.EnumExerciseFieldUpdateOperationsInput | $Enums.Exercise | runtime.Types.Skip
  trainingTime?: Prisma.EnumTrainingTimeFieldUpdateOperationsInput | $Enums.TrainingTime | runtime.Types.Skip
  calorie?: Prisma.IntFieldUpdateOperationsInput | number | runtime.Types.Skip
  gender?: Prisma.EnumGenderFieldUpdateOperationsInput | $Enums.Gender | runtime.Types.Skip
  rating?: Prisma.IntFieldUpdateOperationsInput | number | runtime.Types.Skip
  description?: Prisma.StringFieldUpdateOperationsInput | string | runtime.Types.Skip
  price?: Prisma.IntFieldUpdateOperationsInput | number | runtime.Types.Skip
  video?: Prisma.StringFieldUpdateOperationsInput | string | runtime.Types.Skip
  coachName?: Prisma.StringFieldUpdateOperationsInput | string | runtime.Types.Skip
  specialOffer?: Prisma.BoolFieldUpdateOperationsInput | boolean | runtime.Types.Skip
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string | runtime.Types.Skip
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string | runtime.Types.Skip
  coachId?: Prisma.StringFieldUpdateOperationsInput | string | runtime.Types.Skip
  feedbacks?: Prisma.FeedbackUncheckedUpdateManyWithoutTrainingNestedInput | runtime.Types.Skip
  orders?: Prisma.OrderUncheckedUpdateManyWithoutTrainingNestedInput | runtime.Types.Skip
}

export type TrainingCreateWithoutOrdersInput = {
  id?: string | runtime.Types.Skip
  title: string
  background: string
  level: $Enums.FitnessLevel
  type: $Enums.Exercise
  trainingTime: $Enums.TrainingTime
  calorie?: number | runtime.Types.Skip
  gender: $Enums.Gender
  rating?: number | runtime.Types.Skip
  description: string
  price?: number | runtime.Types.Skip
  video: string
  coachName: string
  specialOffer?: boolean | runtime.Types.Skip
  createdAt?: Date | string | runtime.Types.Skip
  updatedAt?: Date | string | runtime.Types.Skip
  coach: Prisma.UserCreateNestedOneWithoutTrainingsInput
  feedbacks?: Prisma.FeedbackCreateNestedManyWithoutTrainingInput | runtime.Types.Skip
  balances?: Prisma.BalanceCreateNestedManyWithoutTrainingInput | runtime.Types.Skip
}

export type TrainingUncheckedCreateWithoutOrdersInput = {
  id?: string | runtime.Types.Skip
  title: string
  background: string
  level: $Enums.FitnessLevel
  type: $Enums.Exercise
  trainingTime: $Enums.TrainingTime
  calorie?: number | runtime.Types.Skip
  gender: $Enums.Gender
  rating?: number | runtime.Types.Skip
  description: string
  price?: number | runtime.Types.Skip
  video: string
  coachName: string
  specialOffer?: boolean | runtime.Types.Skip
  createdAt?: Date | string | runtime.Types.Skip
  updatedAt?: Date | string | runtime.Types.Skip
  coachId: string
  feedbacks?: Prisma.FeedbackUncheckedCreateNestedManyWithoutTrainingInput | runtime.Types.Skip
  balances?: Prisma.BalanceUncheckedCreateNestedManyWithoutTrainingInput | runtime.Types.Skip
}

export type TrainingCreateOrConnectWithoutOrdersInput = {
  where: Prisma.TrainingWhereUniqueInput
  create: Prisma.XOR<Prisma.TrainingCreateWithoutOrdersInput, Prisma.TrainingUncheckedCreateWithoutOrdersInput>
}

export type TrainingUpsertWithoutOrdersInput = {
  update: Prisma.XOR<Prisma.TrainingUpdateWithoutOrdersInput, Prisma.TrainingUncheckedUpdateWithoutOrdersInput>
  create: Prisma.XOR<Prisma.TrainingCreateWithoutOrdersInput, Prisma.TrainingUncheckedCreateWithoutOrdersInput>
  where?: Prisma.TrainingWhereInput | runtime.Types.Skip
}

export type TrainingUpdateToOneWithWhereWithoutOrdersInput = {
  where?: Prisma.TrainingWhereInput | runtime.Types.Skip
  data: Prisma.XOR<Prisma.TrainingUpdateWithoutOrdersInput, Prisma.TrainingUncheckedUpdateWithoutOrdersInput>
}

export type TrainingUpdateWithoutOrdersInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string | runtime.Types.Skip
  title?: Prisma.StringFieldUpdateOperationsInput | string | runtime.Types.Skip
  background?: Prisma.StringFieldUpdateOperationsInput | string | runtime.Types.Skip
  level?: Prisma.EnumFitnessLevelFieldUpdateOperationsInput | $Enums.FitnessLevel | runtime.Types.Skip
  type?: Prisma.EnumExerciseFieldUpdateOperationsInput | $Enums.Exercise | runtime.Types.Skip
  trainingTime?: Prisma.EnumTrainingTimeFieldUpdateOperationsInput | $Enums.TrainingTime | runtime.Types.Skip
  calorie?: Prisma.IntFieldUpdateOperationsInput | number | runtime.Types.Skip
  gender?: Prisma.EnumGenderFieldUpdateOperationsInput | $Enums.Gender | runtime.Types.Skip
  rating?: Prisma.IntFieldUpdateOperationsInput | number | runtime.Types.Skip
  description?: Prisma.StringFieldUpdateOperationsInput | string | runtime.Types.Skip
  price?: Prisma.IntFieldUpdateOperationsInput | number | runtime.Types.Skip
  video?: Prisma.StringFieldUpdateOperationsInput | string | runtime.Types.Skip
  coachName?: Prisma.StringFieldUpdateOperationsInput | string | runtime.Types.Skip
  specialOffer?: Prisma.BoolFieldUpdateOperationsInput | boolean | runtime.Types.Skip
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string | runtime.Types.Skip
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string | runtime.Types.Skip
  coach?: Prisma.UserUpdateOneRequiredWithoutTrainingsNestedInput | runtime.Types.Skip
  feedbacks?: Prisma.FeedbackUpdateManyWithoutTrainingNestedInput | runtime.Types.Skip
  balances?: Prisma.BalanceUpdateManyWithoutTrainingNestedInput | runtime.Types.Skip
}

export type TrainingUncheckedUpdateWithoutOrdersInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string | runtime.Types.Skip
  title?: Prisma.StringFieldUpdateOperationsInput | string | runtime.Types.Skip
  background?: Prisma.StringFieldUpdateOperationsInput | string | runtime.Types.Skip
  level?: Prisma.EnumFitnessLevelFieldUpdateOperationsInput | $Enums.FitnessLevel | runtime.Types.Skip
  type?: Prisma.EnumExerciseFieldUpdateOperationsInput | $Enums.Exercise | runtime.Types.Skip
  trainingTime?: Prisma.EnumTrainingTimeFieldUpdateOperationsInput | $Enums.TrainingTime | runtime.Types.Skip
  calorie?: Prisma.IntFieldUpdateOperationsInput | number | runtime.Types.Skip
  gender?: Prisma.EnumGenderFieldUpdateOperationsInput | $Enums.Gender | runtime.Types.Skip
  rating?: Prisma.IntFieldUpdateOperationsInput | number | runtime.Types.Skip
  description?: Prisma.StringFieldUpdateOperationsInput | string | runtime.Types.Skip
  price?: Prisma.IntFieldUpdateOperationsInput | number | runtime.Types.Skip
  video?: Prisma.StringFieldUpdateOperationsInput | string | runtime.Types.Skip
  coachName?: Prisma.StringFieldUpdateOperationsInput | string | runtime.Types.Skip
  specialOffer?: Prisma.BoolFieldUpdateOperationsInput | boolean | runtime.Types.Skip
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string | runtime.Types.Skip
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string | runtime.Types.Skip
  coachId?: Prisma.StringFieldUpdateOperationsInput | string | runtime.Types.Skip
  feedbacks?: Prisma.FeedbackUncheckedUpdateManyWithoutTrainingNestedInput | runtime.Types.Skip
  balances?: Prisma.BalanceUncheckedUpdateManyWithoutTrainingNestedInput | runtime.Types.Skip
}

export type TrainingCreateWithoutFeedbacksInput = {
  id?: string | runtime.Types.Skip
  title: string
  background: string
  level: $Enums.FitnessLevel
  type: $Enums.Exercise
  trainingTime: $Enums.TrainingTime
  calorie?: number | runtime.Types.Skip
  gender: $Enums.Gender
  rating?: number | runtime.Types.Skip
  description: string
  price?: number | runtime.Types.Skip
  video: string
  coachName: string
  specialOffer?: boolean | runtime.Types.Skip
  createdAt?: Date | string | runtime.Types.Skip
  updatedAt?: Date | string | runtime.Types.Skip
  coach: Prisma.UserCreateNestedOneWithoutTrainingsInput
  balances?: Prisma.BalanceCreateNestedManyWithoutTrainingInput | runtime.Types.Skip
  orders?: Prisma.OrderCreateNestedManyWithoutTrainingInput | runtime.Types.Skip
}

export type TrainingUncheckedCreateWithoutFeedbacksInput = {
  id?: string | runtime.Types.Skip
  title: string
  background: string
  level: $Enums.FitnessLevel
  type: $Enums.Exercise
  trainingTime: $Enums.TrainingTime
  calorie?: number | runtime.Types.Skip
  gender: $Enums.Gender
  rating?: number | runtime.Types.Skip
  description: string
  price?: number | runtime.Types.Skip
  video: string
  coachName: string
  specialOffer?: boolean | runtime.Types.Skip
  createdAt?: Date | string | runtime.Types.Skip
  updatedAt?: Date | string | runtime.Types.Skip
  coachId: string
  balances?: Prisma.BalanceUncheckedCreateNestedManyWithoutTrainingInput | runtime.Types.Skip
  orders?: Prisma.OrderUncheckedCreateNestedManyWithoutTrainingInput | runtime.Types.Skip
}

export type TrainingCreateOrConnectWithoutFeedbacksInput = {
  where: Prisma.TrainingWhereUniqueInput
  create: Prisma.XOR<Prisma.TrainingCreateWithoutFeedbacksInput, Prisma.TrainingUncheckedCreateWithoutFeedbacksInput>
}

export type TrainingUpsertWithoutFeedbacksInput = {
  update: Prisma.XOR<Prisma.TrainingUpdateWithoutFeedbacksInput, Prisma.TrainingUncheckedUpdateWithoutFeedbacksInput>
  create: Prisma.XOR<Prisma.TrainingCreateWithoutFeedbacksInput, Prisma.TrainingUncheckedCreateWithoutFeedbacksInput>
  where?: Prisma.TrainingWhereInput | runtime.Types.Skip
}

export type TrainingUpdateToOneWithWhereWithoutFeedbacksInput = {
  where?: Prisma.TrainingWhereInput | runtime.Types.Skip
  data: Prisma.XOR<Prisma.TrainingUpdateWithoutFeedbacksInput, Prisma.TrainingUncheckedUpdateWithoutFeedbacksInput>
}

export type TrainingUpdateWithoutFeedbacksInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string | runtime.Types.Skip
  title?: Prisma.StringFieldUpdateOperationsInput | string | runtime.Types.Skip
  background?: Prisma.StringFieldUpdateOperationsInput | string | runtime.Types.Skip
  level?: Prisma.EnumFitnessLevelFieldUpdateOperationsInput | $Enums.FitnessLevel | runtime.Types.Skip
  type?: Prisma.EnumExerciseFieldUpdateOperationsInput | $Enums.Exercise | runtime.Types.Skip
  trainingTime?: Prisma.EnumTrainingTimeFieldUpdateOperationsInput | $Enums.TrainingTime | runtime.Types.Skip
  calorie?: Prisma.IntFieldUpdateOperationsInput | number | runtime.Types.Skip
  gender?: Prisma.EnumGenderFieldUpdateOperationsInput | $Enums.Gender | runtime.Types.Skip
  rating?: Prisma.IntFieldUpdateOperationsInput | number | runtime.Types.Skip
  description?: Prisma.StringFieldUpdateOperationsInput | string | runtime.Types.Skip
  price?: Prisma.IntFieldUpdateOperationsInput | number | runtime.Types.Skip
  video?: Prisma.StringFieldUpdateOperationsInput | string | runtime.Types.Skip
  coachName?: Prisma.StringFieldUpdateOperationsInput | string | runtime.Types.Skip
  specialOffer?: Prisma.BoolFieldUpdateOperationsInput | boolean | runtime.Types.Skip
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string | runtime.Types.Skip
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string | runtime.Types.Skip
  coach?: Prisma.UserUpdateOneRequiredWithoutTrainingsNestedInput | runtime.Types.Skip
  balances?: Prisma.BalanceUpdateManyWithoutTrainingNestedInput | runtime.Types.Skip
  orders?: Prisma.OrderUpdateManyWithoutTrainingNestedInput | runtime.Types.Skip
}

export type TrainingUncheckedUpdateWithoutFeedbacksInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string | runtime.Types.Skip
  title?: Prisma.StringFieldUpdateOperationsInput | string | runtime.Types.Skip
  background?: Prisma.StringFieldUpdateOperationsInput | string | runtime.Types.Skip
  level?: Prisma.EnumFitnessLevelFieldUpdateOperationsInput | $Enums.FitnessLevel | runtime.Types.Skip
  type?: Prisma.EnumExerciseFieldUpdateOperationsInput | $Enums.Exercise | runtime.Types.Skip
  trainingTime?: Prisma.EnumTrainingTimeFieldUpdateOperationsInput | $Enums.TrainingTime | runtime.Types.Skip
  calorie?: Prisma.IntFieldUpdateOperationsInput | number | runtime.Types.Skip
  gender?: Prisma.EnumGenderFieldUpdateOperationsInput | $Enums.Gender | runtime.Types.Skip
  rating?: Prisma.IntFieldUpdateOperationsInput | number | runtime.Types.Skip
  description?: Prisma.StringFieldUpdateOperationsInput | string | runtime.Types.Skip
  price?: Prisma.IntFieldUpdateOperationsInput | number | runtime.Types.Skip
  video?: Prisma.StringFieldUpdateOperationsInput | string | runtime.Types.Skip
  coachName?: Prisma.StringFieldUpdateOperationsInput | string | runtime.Types.Skip
  specialOffer?: Prisma.BoolFieldUpdateOperationsInput | boolean | runtime.Types.Skip
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string | runtime.Types.Skip
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string | runtime.Types.Skip
  coachId?: Prisma.StringFieldUpdateOperationsInput | string | runtime.Types.Skip
  balances?: Prisma.BalanceUncheckedUpdateManyWithoutTrainingNestedInput | runtime.Types.Skip
  orders?: Prisma.OrderUncheckedUpdateManyWithoutTrainingNestedInput | runtime.Types.Skip
}

export type TrainingCreateManyCoachInput = {
  id?: string | runtime.Types.Skip
  title: string
  background: string
  level: $Enums.FitnessLevel
  type: $Enums.Exercise
  trainingTime: $Enums.TrainingTime
  calorie?: number | runtime.Types.Skip
  gender: $Enums.Gender
  rating?: number | runtime.Types.Skip
  description: string
  price?: number | runtime.Types.Skip
  video: string
  coachName: string
  specialOffer?: boolean | runtime.Types.Skip
  createdAt?: Date | string | runtime.Types.Skip
  updatedAt?: Date | string | runtime.Types.Skip
}

export type TrainingUpdateWithoutCoachInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string | runtime.Types.Skip
  title?: Prisma.StringFieldUpdateOperationsInput | string | runtime.Types.Skip
  background?: Prisma.StringFieldUpdateOperationsInput | string | runtime.Types.Skip
  level?: Prisma.EnumFitnessLevelFieldUpdateOperationsInput | $Enums.FitnessLevel | runtime.Types.Skip
  type?: Prisma.EnumExerciseFieldUpdateOperationsInput | $Enums.Exercise | runtime.Types.Skip
  trainingTime?: Prisma.EnumTrainingTimeFieldUpdateOperationsInput | $Enums.TrainingTime | runtime.Types.Skip
  calorie?: Prisma.IntFieldUpdateOperationsInput | number | runtime.Types.Skip
  gender?: Prisma.EnumGenderFieldUpdateOperationsInput | $Enums.Gender | runtime.Types.Skip
  rating?: Prisma.IntFieldUpdateOperationsInput | number | runtime.Types.Skip
  description?: Prisma.StringFieldUpdateOperationsInput | string | runtime.Types.Skip
  price?: Prisma.IntFieldUpdateOperationsInput | number | runtime.Types.Skip
  video?: Prisma.StringFieldUpdateOperationsInput | string | runtime.Types.Skip
  coachName?: Prisma.StringFieldUpdateOperationsInput | string | runtime.Types.Skip
  specialOffer?: Prisma.BoolFieldUpdateOperationsInput | boolean | runtime.Types.Skip
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string | runtime.Types.Skip
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string | runtime.Types.Skip
  feedbacks?: Prisma.FeedbackUpdateManyWithoutTrainingNestedInput | runtime.Types.Skip
  balances?: Prisma.BalanceUpdateManyWithoutTrainingNestedInput | runtime.Types.Skip
  orders?: Prisma.OrderUpdateManyWithoutTrainingNestedInput | runtime.Types.Skip
}

export type TrainingUncheckedUpdateWithoutCoachInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string | runtime.Types.Skip
  title?: Prisma.StringFieldUpdateOperationsInput | string | runtime.Types.Skip
  background?: Prisma.StringFieldUpdateOperationsInput | string | runtime.Types.Skip
  level?: Prisma.EnumFitnessLevelFieldUpdateOperationsInput | $Enums.FitnessLevel | runtime.Types.Skip
  type?: Prisma.EnumExerciseFieldUpdateOperationsInput | $Enums.Exercise | runtime.Types.Skip
  trainingTime?: Prisma.EnumTrainingTimeFieldUpdateOperationsInput | $Enums.TrainingTime | runtime.Types.Skip
  calorie?: Prisma.IntFieldUpdateOperationsInput | number | runtime.Types.Skip
  gender?: Prisma.EnumGenderFieldUpdateOperationsInput | $Enums.Gender | runtime.Types.Skip
  rating?: Prisma.IntFieldUpdateOperationsInput | number | runtime.Types.Skip
  description?: Prisma.StringFieldUpdateOperationsInput | string | runtime.Types.Skip
  price?: Prisma.IntFieldUpdateOperationsInput | number | runtime.Types.Skip
  video?: Prisma.StringFieldUpdateOperationsInput | string | runtime.Types.Skip
  coachName?: Prisma.StringFieldUpdateOperationsInput | string | runtime.Types.Skip
  specialOffer?: Prisma.BoolFieldUpdateOperationsInput | boolean | runtime.Types.Skip
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string | runtime.Types.Skip
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string | runtime.Types.Skip
  feedbacks?: Prisma.FeedbackUncheckedUpdateManyWithoutTrainingNestedInput | runtime.Types.Skip
  balances?: Prisma.BalanceUncheckedUpdateManyWithoutTrainingNestedInput | runtime.Types.Skip
  orders?: Prisma.OrderUncheckedUpdateManyWithoutTrainingNestedInput | runtime.Types.Skip
}

export type TrainingUncheckedUpdateManyWithoutCoachInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string | runtime.Types.Skip
  title?: Prisma.StringFieldUpdateOperationsInput | string | runtime.Types.Skip
  background?: Prisma.StringFieldUpdateOperationsInput | string | runtime.Types.Skip
  level?: Prisma.EnumFitnessLevelFieldUpdateOperationsInput | $Enums.FitnessLevel | runtime.Types.Skip
  type?: Prisma.EnumExerciseFieldUpdateOperationsInput | $Enums.Exercise | runtime.Types.Skip
  trainingTime?: Prisma.EnumTrainingTimeFieldUpdateOperationsInput | $Enums.TrainingTime | runtime.Types.Skip
  calorie?: Prisma.IntFieldUpdateOperationsInput | number | runtime.Types.Skip
  gender?: Prisma.EnumGenderFieldUpdateOperationsInput | $Enums.Gender | runtime.Types.Skip
  rating?: Prisma.IntFieldUpdateOperationsInput | number | runtime.Types.Skip
  description?: Prisma.StringFieldUpdateOperationsInput | string | runtime.Types.Skip
  price?: Prisma.IntFieldUpdateOperationsInput | number | runtime.Types.Skip
  video?: Prisma.StringFieldUpdateOperationsInput | string | runtime.Types.Skip
  coachName?: Prisma.StringFieldUpdateOperationsInput | string | runtime.Types.Skip
  specialOffer?: Prisma.BoolFieldUpdateOperationsInput | boolean | runtime.Types.Skip
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string | runtime.Types.Skip
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string | runtime.Types.Skip
}


/**
 * Count Type TrainingCountOutputType
 */

export type TrainingCountOutputType = {
  feedbacks: number
  balances: number
  orders: number
}

export type TrainingCountOutputTypeSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  feedbacks?: boolean | TrainingCountOutputTypeCountFeedbacksArgs
  balances?: boolean | TrainingCountOutputTypeCountBalancesArgs
  orders?: boolean | TrainingCountOutputTypeCountOrdersArgs
}

/**
 * TrainingCountOutputType without action
 */
export type TrainingCountOutputTypeDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the TrainingCountOutputType
   */
  select?: Prisma.TrainingCountOutputTypeSelect<ExtArgs> | null
}

/**
 * TrainingCountOutputType without action
 */
export type TrainingCountOutputTypeCountFeedbacksArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.FeedbackWhereInput | runtime.Types.Skip
}

/**
 * TrainingCountOutputType without action
 */
export type TrainingCountOutputTypeCountBalancesArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.BalanceWhereInput | runtime.Types.Skip
}

/**
 * TrainingCountOutputType without action
 */
export type TrainingCountOutputTypeCountOrdersArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.OrderWhereInput | runtime.Types.Skip
}


export type TrainingSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean | runtime.Types.Skip
  title?: boolean | runtime.Types.Skip
  background?: boolean | runtime.Types.Skip
  level?: boolean | runtime.Types.Skip
  type?: boolean | runtime.Types.Skip
  trainingTime?: boolean | runtime.Types.Skip
  calorie?: boolean | runtime.Types.Skip
  gender?: boolean | runtime.Types.Skip
  rating?: boolean | runtime.Types.Skip
  description?: boolean | runtime.Types.Skip
  price?: boolean | runtime.Types.Skip
  video?: boolean | runtime.Types.Skip
  coachName?: boolean | runtime.Types.Skip
  specialOffer?: boolean | runtime.Types.Skip
  createdAt?: boolean | runtime.Types.Skip
  updatedAt?: boolean | runtime.Types.Skip
  coachId?: boolean | runtime.Types.Skip
  coach?: boolean | Prisma.UserDefaultArgs<ExtArgs> | runtime.Types.Skip
  feedbacks?: boolean | Prisma.Training$feedbacksArgs<ExtArgs> | runtime.Types.Skip
  balances?: boolean | Prisma.Training$balancesArgs<ExtArgs> | runtime.Types.Skip
  orders?: boolean | Prisma.Training$ordersArgs<ExtArgs> | runtime.Types.Skip
  _count?: boolean | Prisma.TrainingCountOutputTypeDefaultArgs<ExtArgs> | runtime.Types.Skip
}, ExtArgs["result"]["training"]>

export type TrainingSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean | runtime.Types.Skip
  title?: boolean | runtime.Types.Skip
  background?: boolean | runtime.Types.Skip
  level?: boolean | runtime.Types.Skip
  type?: boolean | runtime.Types.Skip
  trainingTime?: boolean | runtime.Types.Skip
  calorie?: boolean | runtime.Types.Skip
  gender?: boolean | runtime.Types.Skip
  rating?: boolean | runtime.Types.Skip
  description?: boolean | runtime.Types.Skip
  price?: boolean | runtime.Types.Skip
  video?: boolean | runtime.Types.Skip
  coachName?: boolean | runtime.Types.Skip
  specialOffer?: boolean | runtime.Types.Skip
  createdAt?: boolean | runtime.Types.Skip
  updatedAt?: boolean | runtime.Types.Skip
  coachId?: boolean | runtime.Types.Skip
  coach?: boolean | Prisma.UserDefaultArgs<ExtArgs> | runtime.Types.Skip
}, ExtArgs["result"]["training"]>

export type TrainingSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean | runtime.Types.Skip
  title?: boolean | runtime.Types.Skip
  background?: boolean | runtime.Types.Skip
  level?: boolean | runtime.Types.Skip
  type?: boolean | runtime.Types.Skip
  trainingTime?: boolean | runtime.Types.Skip
  calorie?: boolean | runtime.Types.Skip
  gender?: boolean | runtime.Types.Skip
  rating?: boolean | runtime.Types.Skip
  description?: boolean | runtime.Types.Skip
  price?: boolean | runtime.Types.Skip
  video?: boolean | runtime.Types.Skip
  coachName?: boolean | runtime.Types.Skip
  specialOffer?: boolean | runtime.Types.Skip
  createdAt?: boolean | runtime.Types.Skip
  updatedAt?: boolean | runtime.Types.Skip
  coachId?: boolean | runtime.Types.Skip
  coach?: boolean | Prisma.UserDefaultArgs<ExtArgs> | runtime.Types.Skip
}, ExtArgs["result"]["training"]>

export type TrainingSelectScalar = {
  id?: boolean | runtime.Types.Skip
  title?: boolean | runtime.Types.Skip
  background?: boolean | runtime.Types.Skip
  level?: boolean | runtime.Types.Skip
  type?: boolean | runtime.Types.Skip
  trainingTime?: boolean | runtime.Types.Skip
  calorie?: boolean | runtime.Types.Skip
  gender?: boolean | runtime.Types.Skip
  rating?: boolean | runtime.Types.Skip
  description?: boolean | runtime.Types.Skip
  price?: boolean | runtime.Types.Skip
  video?: boolean | runtime.Types.Skip
  coachName?: boolean | runtime.Types.Skip
  specialOffer?: boolean | runtime.Types.Skip
  createdAt?: boolean | runtime.Types.Skip
  updatedAt?: boolean | runtime.Types.Skip
  coachId?: boolean | runtime.Types.Skip
}

export type TrainingOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "title" | "background" | "level" | "type" | "trainingTime" | "calorie" | "gender" | "rating" | "description" | "price" | "video" | "coachName" | "specialOffer" | "createdAt" | "updatedAt" | "coachId", ExtArgs["result"]["training"], runtime.Types.Skip>
export type TrainingInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  coach?: boolean | Prisma.UserDefaultArgs<ExtArgs> | runtime.Types.Skip
  feedbacks?: boolean | Prisma.Training$feedbacksArgs<ExtArgs> | runtime.Types.Skip
  balances?: boolean | Prisma.Training$balancesArgs<ExtArgs> | runtime.Types.Skip
  orders?: boolean | Prisma.Training$ordersArgs<ExtArgs> | runtime.Types.Skip
  _count?: boolean | Prisma.TrainingCountOutputTypeDefaultArgs<ExtArgs> | runtime.Types.Skip
}
export type TrainingIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  coach?: boolean | Prisma.UserDefaultArgs<ExtArgs> | runtime.Types.Skip
}
export type TrainingIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  coach?: boolean | Prisma.UserDefaultArgs<ExtArgs> | runtime.Types.Skip
}

export type $TrainingPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "Training"
  objects: {
    coach: Prisma.$UserPayload<ExtArgs>
    feedbacks: Prisma.$FeedbackPayload<ExtArgs>[]
    balances: Prisma.$BalancePayload<ExtArgs>[]
    orders: Prisma.$OrderPayload<ExtArgs>[]
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: string
    title: string
    background: string
    level: $Enums.FitnessLevel
    type: $Enums.Exercise
    trainingTime: $Enums.TrainingTime
    calorie: number
    gender: $Enums.Gender
    rating: number
    description: string
    price: number
    video: string
    coachName: string
    specialOffer: boolean
    createdAt: Date
    updatedAt: Date
    coachId: string
  }, ExtArgs["result"]["training"]>
  composites: {}
}

export type TrainingGetPayload<S extends boolean | null | undefined | TrainingDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$TrainingPayload, S>

export type TrainingCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<TrainingFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: TrainingCountAggregateInputType | true
  }

export interface TrainingDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Training'], meta: { name: 'Training' } }
  /**
   * Find zero or one Training that matches the filter.
   * @param {TrainingFindUniqueArgs} args - Arguments to find a Training
   * @example
   * // Get one Training
   * const training = await prisma.training.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends TrainingFindUniqueArgs>(args: Prisma.SelectSubset<T, TrainingFindUniqueArgs<ExtArgs>>): Prisma.Prisma__TrainingClient<runtime.Types.Result.GetResult<Prisma.$TrainingPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one Training that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {TrainingFindUniqueOrThrowArgs} args - Arguments to find a Training
   * @example
   * // Get one Training
   * const training = await prisma.training.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends TrainingFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, TrainingFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__TrainingClient<runtime.Types.Result.GetResult<Prisma.$TrainingPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Training that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {TrainingFindFirstArgs} args - Arguments to find a Training
   * @example
   * // Get one Training
   * const training = await prisma.training.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends TrainingFindFirstArgs>(args?: Prisma.SelectSubset<T, TrainingFindFirstArgs<ExtArgs>>): Prisma.Prisma__TrainingClient<runtime.Types.Result.GetResult<Prisma.$TrainingPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Training that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {TrainingFindFirstOrThrowArgs} args - Arguments to find a Training
   * @example
   * // Get one Training
   * const training = await prisma.training.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends TrainingFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, TrainingFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__TrainingClient<runtime.Types.Result.GetResult<Prisma.$TrainingPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more Trainings that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {TrainingFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all Trainings
   * const trainings = await prisma.training.findMany()
   * 
   * // Get first 10 Trainings
   * const trainings = await prisma.training.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const trainingWithIdOnly = await prisma.training.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends TrainingFindManyArgs>(args?: Prisma.SelectSubset<T, TrainingFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$TrainingPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a Training.
   * @param {TrainingCreateArgs} args - Arguments to create a Training.
   * @example
   * // Create one Training
   * const Training = await prisma.training.create({
   *   data: {
   *     // ... data to create a Training
   *   }
   * })
   * 
   */
  create<T extends TrainingCreateArgs>(args: Prisma.SelectSubset<T, TrainingCreateArgs<ExtArgs>>): Prisma.Prisma__TrainingClient<runtime.Types.Result.GetResult<Prisma.$TrainingPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many Trainings.
   * @param {TrainingCreateManyArgs} args - Arguments to create many Trainings.
   * @example
   * // Create many Trainings
   * const training = await prisma.training.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends TrainingCreateManyArgs>(args?: Prisma.SelectSubset<T, TrainingCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many Trainings and returns the data saved in the database.
   * @param {TrainingCreateManyAndReturnArgs} args - Arguments to create many Trainings.
   * @example
   * // Create many Trainings
   * const training = await prisma.training.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many Trainings and only return the `id`
   * const trainingWithIdOnly = await prisma.training.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends TrainingCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, TrainingCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$TrainingPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a Training.
   * @param {TrainingDeleteArgs} args - Arguments to delete one Training.
   * @example
   * // Delete one Training
   * const Training = await prisma.training.delete({
   *   where: {
   *     // ... filter to delete one Training
   *   }
   * })
   * 
   */
  delete<T extends TrainingDeleteArgs>(args: Prisma.SelectSubset<T, TrainingDeleteArgs<ExtArgs>>): Prisma.Prisma__TrainingClient<runtime.Types.Result.GetResult<Prisma.$TrainingPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one Training.
   * @param {TrainingUpdateArgs} args - Arguments to update one Training.
   * @example
   * // Update one Training
   * const training = await prisma.training.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends TrainingUpdateArgs>(args: Prisma.SelectSubset<T, TrainingUpdateArgs<ExtArgs>>): Prisma.Prisma__TrainingClient<runtime.Types.Result.GetResult<Prisma.$TrainingPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more Trainings.
   * @param {TrainingDeleteManyArgs} args - Arguments to filter Trainings to delete.
   * @example
   * // Delete a few Trainings
   * const { count } = await prisma.training.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends TrainingDeleteManyArgs>(args?: Prisma.SelectSubset<T, TrainingDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Trainings.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {TrainingUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many Trainings
   * const training = await prisma.training.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends TrainingUpdateManyArgs>(args: Prisma.SelectSubset<T, TrainingUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Trainings and returns the data updated in the database.
   * @param {TrainingUpdateManyAndReturnArgs} args - Arguments to update many Trainings.
   * @example
   * // Update many Trainings
   * const training = await prisma.training.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more Trainings and only return the `id`
   * const trainingWithIdOnly = await prisma.training.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends TrainingUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, TrainingUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$TrainingPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one Training.
   * @param {TrainingUpsertArgs} args - Arguments to update or create a Training.
   * @example
   * // Update or create a Training
   * const training = await prisma.training.upsert({
   *   create: {
   *     // ... data to create a Training
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the Training we want to update
   *   }
   * })
   */
  upsert<T extends TrainingUpsertArgs>(args: Prisma.SelectSubset<T, TrainingUpsertArgs<ExtArgs>>): Prisma.Prisma__TrainingClient<runtime.Types.Result.GetResult<Prisma.$TrainingPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of Trainings.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {TrainingCountArgs} args - Arguments to filter Trainings to count.
   * @example
   * // Count the number of Trainings
   * const count = await prisma.training.count({
   *   where: {
   *     // ... the filter for the Trainings we want to count
   *   }
   * })
  **/
  count<T extends TrainingCountArgs>(
    args?: Prisma.Subset<T, TrainingCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], TrainingCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a Training.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {TrainingAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends TrainingAggregateArgs>(args: Prisma.Subset<T, TrainingAggregateArgs>): Prisma.PrismaPromise<GetTrainingAggregateType<T>>

  /**
   * Group by Training.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {TrainingGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends TrainingGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: TrainingGroupByArgs['orderBy'] }
      : { orderBy?: TrainingGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, TrainingGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTrainingGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the Training model
 */
readonly fields: TrainingFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for Training.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__TrainingClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  coach<T extends Prisma.UserDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.UserDefaultArgs<ExtArgs>>): Prisma.Prisma__UserClient<runtime.Types.Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  feedbacks<T extends Prisma.Training$feedbacksArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.Training$feedbacksArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$FeedbackPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
  balances<T extends Prisma.Training$balancesArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.Training$balancesArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$BalancePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
  orders<T extends Prisma.Training$ordersArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.Training$ordersArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$OrderPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the Training model
 */
export interface TrainingFieldRefs {
  readonly id: Prisma.FieldRef<"Training", 'String'>
  readonly title: Prisma.FieldRef<"Training", 'String'>
  readonly background: Prisma.FieldRef<"Training", 'String'>
  readonly level: Prisma.FieldRef<"Training", 'FitnessLevel'>
  readonly type: Prisma.FieldRef<"Training", 'Exercise'>
  readonly trainingTime: Prisma.FieldRef<"Training", 'TrainingTime'>
  readonly calorie: Prisma.FieldRef<"Training", 'Int'>
  readonly gender: Prisma.FieldRef<"Training", 'Gender'>
  readonly rating: Prisma.FieldRef<"Training", 'Int'>
  readonly description: Prisma.FieldRef<"Training", 'String'>
  readonly price: Prisma.FieldRef<"Training", 'Int'>
  readonly video: Prisma.FieldRef<"Training", 'String'>
  readonly coachName: Prisma.FieldRef<"Training", 'String'>
  readonly specialOffer: Prisma.FieldRef<"Training", 'Boolean'>
  readonly createdAt: Prisma.FieldRef<"Training", 'DateTime'>
  readonly updatedAt: Prisma.FieldRef<"Training", 'DateTime'>
  readonly coachId: Prisma.FieldRef<"Training", 'String'>
}
    

// Custom InputTypes
/**
 * Training findUnique
 */
export type TrainingFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Training
   */
  select?: Prisma.TrainingSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Training
   */
  omit?: Prisma.TrainingOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TrainingInclude<ExtArgs> | null
  /**
   * Filter, which Training to fetch.
   */
  where: Prisma.TrainingWhereUniqueInput
}

/**
 * Training findUniqueOrThrow
 */
export type TrainingFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Training
   */
  select?: Prisma.TrainingSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Training
   */
  omit?: Prisma.TrainingOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TrainingInclude<ExtArgs> | null
  /**
   * Filter, which Training to fetch.
   */
  where: Prisma.TrainingWhereUniqueInput
}

/**
 * Training findFirst
 */
export type TrainingFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Training
   */
  select?: Prisma.TrainingSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Training
   */
  omit?: Prisma.TrainingOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TrainingInclude<ExtArgs> | null
  /**
   * Filter, which Training to fetch.
   */
  where?: Prisma.TrainingWhereInput | runtime.Types.Skip
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Trainings to fetch.
   */
  orderBy?: Prisma.TrainingOrderByWithRelationInput | Prisma.TrainingOrderByWithRelationInput[] | runtime.Types.Skip
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for Trainings.
   */
  cursor?: Prisma.TrainingWhereUniqueInput | runtime.Types.Skip
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Trainings from the position of the cursor.
   */
  take?: number | runtime.Types.Skip
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Trainings.
   */
  skip?: number | runtime.Types.Skip
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of Trainings.
   */
  distinct?: Prisma.TrainingScalarFieldEnum | Prisma.TrainingScalarFieldEnum[] | runtime.Types.Skip
}

/**
 * Training findFirstOrThrow
 */
export type TrainingFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Training
   */
  select?: Prisma.TrainingSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Training
   */
  omit?: Prisma.TrainingOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TrainingInclude<ExtArgs> | null
  /**
   * Filter, which Training to fetch.
   */
  where?: Prisma.TrainingWhereInput | runtime.Types.Skip
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Trainings to fetch.
   */
  orderBy?: Prisma.TrainingOrderByWithRelationInput | Prisma.TrainingOrderByWithRelationInput[] | runtime.Types.Skip
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for Trainings.
   */
  cursor?: Prisma.TrainingWhereUniqueInput | runtime.Types.Skip
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Trainings from the position of the cursor.
   */
  take?: number | runtime.Types.Skip
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Trainings.
   */
  skip?: number | runtime.Types.Skip
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of Trainings.
   */
  distinct?: Prisma.TrainingScalarFieldEnum | Prisma.TrainingScalarFieldEnum[] | runtime.Types.Skip
}

/**
 * Training findMany
 */
export type TrainingFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Training
   */
  select?: Prisma.TrainingSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Training
   */
  omit?: Prisma.TrainingOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TrainingInclude<ExtArgs> | null
  /**
   * Filter, which Trainings to fetch.
   */
  where?: Prisma.TrainingWhereInput | runtime.Types.Skip
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Trainings to fetch.
   */
  orderBy?: Prisma.TrainingOrderByWithRelationInput | Prisma.TrainingOrderByWithRelationInput[] | runtime.Types.Skip
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing Trainings.
   */
  cursor?: Prisma.TrainingWhereUniqueInput | runtime.Types.Skip
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Trainings from the position of the cursor.
   */
  take?: number | runtime.Types.Skip
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Trainings.
   */
  skip?: number | runtime.Types.Skip
  distinct?: Prisma.TrainingScalarFieldEnum | Prisma.TrainingScalarFieldEnum[] | runtime.Types.Skip
}

/**
 * Training create
 */
export type TrainingCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Training
   */
  select?: Prisma.TrainingSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Training
   */
  omit?: Prisma.TrainingOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TrainingInclude<ExtArgs> | null
  /**
   * The data needed to create a Training.
   */
  data: Prisma.XOR<Prisma.TrainingCreateInput, Prisma.TrainingUncheckedCreateInput>
}

/**
 * Training createMany
 */
export type TrainingCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many Trainings.
   */
  data: Prisma.TrainingCreateManyInput | Prisma.TrainingCreateManyInput[]
  skipDuplicates?: boolean | runtime.Types.Skip
}

/**
 * Training createManyAndReturn
 */
export type TrainingCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Training
   */
  select?: Prisma.TrainingSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the Training
   */
  omit?: Prisma.TrainingOmit<ExtArgs> | null
  /**
   * The data used to create many Trainings.
   */
  data: Prisma.TrainingCreateManyInput | Prisma.TrainingCreateManyInput[]
  skipDuplicates?: boolean | runtime.Types.Skip
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TrainingIncludeCreateManyAndReturn<ExtArgs> | null
}

/**
 * Training update
 */
export type TrainingUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Training
   */
  select?: Prisma.TrainingSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Training
   */
  omit?: Prisma.TrainingOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TrainingInclude<ExtArgs> | null
  /**
   * The data needed to update a Training.
   */
  data: Prisma.XOR<Prisma.TrainingUpdateInput, Prisma.TrainingUncheckedUpdateInput>
  /**
   * Choose, which Training to update.
   */
  where: Prisma.TrainingWhereUniqueInput
}

/**
 * Training updateMany
 */
export type TrainingUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update Trainings.
   */
  data: Prisma.XOR<Prisma.TrainingUpdateManyMutationInput, Prisma.TrainingUncheckedUpdateManyInput>
  /**
   * Filter which Trainings to update
   */
  where?: Prisma.TrainingWhereInput | runtime.Types.Skip
  /**
   * Limit how many Trainings to update.
   */
  limit?: number | runtime.Types.Skip
}

/**
 * Training updateManyAndReturn
 */
export type TrainingUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Training
   */
  select?: Prisma.TrainingSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the Training
   */
  omit?: Prisma.TrainingOmit<ExtArgs> | null
  /**
   * The data used to update Trainings.
   */
  data: Prisma.XOR<Prisma.TrainingUpdateManyMutationInput, Prisma.TrainingUncheckedUpdateManyInput>
  /**
   * Filter which Trainings to update
   */
  where?: Prisma.TrainingWhereInput | runtime.Types.Skip
  /**
   * Limit how many Trainings to update.
   */
  limit?: number | runtime.Types.Skip
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TrainingIncludeUpdateManyAndReturn<ExtArgs> | null
}

/**
 * Training upsert
 */
export type TrainingUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Training
   */
  select?: Prisma.TrainingSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Training
   */
  omit?: Prisma.TrainingOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TrainingInclude<ExtArgs> | null
  /**
   * The filter to search for the Training to update in case it exists.
   */
  where: Prisma.TrainingWhereUniqueInput
  /**
   * In case the Training found by the `where` argument doesn't exist, create a new Training with this data.
   */
  create: Prisma.XOR<Prisma.TrainingCreateInput, Prisma.TrainingUncheckedCreateInput>
  /**
   * In case the Training was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.TrainingUpdateInput, Prisma.TrainingUncheckedUpdateInput>
}

/**
 * Training delete
 */
export type TrainingDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Training
   */
  select?: Prisma.TrainingSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Training
   */
  omit?: Prisma.TrainingOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TrainingInclude<ExtArgs> | null
  /**
   * Filter which Training to delete.
   */
  where: Prisma.TrainingWhereUniqueInput
}

/**
 * Training deleteMany
 */
export type TrainingDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which Trainings to delete
   */
  where?: Prisma.TrainingWhereInput | runtime.Types.Skip
  /**
   * Limit how many Trainings to delete.
   */
  limit?: number | runtime.Types.Skip
}

/**
 * Training.feedbacks
 */
export type Training$feedbacksArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Feedback
   */
  select?: Prisma.FeedbackSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Feedback
   */
  omit?: Prisma.FeedbackOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.FeedbackInclude<ExtArgs> | null
  where?: Prisma.FeedbackWhereInput | runtime.Types.Skip
  orderBy?: Prisma.FeedbackOrderByWithRelationInput | Prisma.FeedbackOrderByWithRelationInput[] | runtime.Types.Skip
  cursor?: Prisma.FeedbackWhereUniqueInput | runtime.Types.Skip
  take?: number | runtime.Types.Skip
  skip?: number | runtime.Types.Skip
  distinct?: Prisma.FeedbackScalarFieldEnum | Prisma.FeedbackScalarFieldEnum[] | runtime.Types.Skip
}

/**
 * Training.balances
 */
export type Training$balancesArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Balance
   */
  select?: Prisma.BalanceSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Balance
   */
  omit?: Prisma.BalanceOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.BalanceInclude<ExtArgs> | null
  where?: Prisma.BalanceWhereInput | runtime.Types.Skip
  orderBy?: Prisma.BalanceOrderByWithRelationInput | Prisma.BalanceOrderByWithRelationInput[] | runtime.Types.Skip
  cursor?: Prisma.BalanceWhereUniqueInput | runtime.Types.Skip
  take?: number | runtime.Types.Skip
  skip?: number | runtime.Types.Skip
  distinct?: Prisma.BalanceScalarFieldEnum | Prisma.BalanceScalarFieldEnum[] | runtime.Types.Skip
}

/**
 * Training.orders
 */
export type Training$ordersArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Order
   */
  select?: Prisma.OrderSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Order
   */
  omit?: Prisma.OrderOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.OrderInclude<ExtArgs> | null
  where?: Prisma.OrderWhereInput | runtime.Types.Skip
  orderBy?: Prisma.OrderOrderByWithRelationInput | Prisma.OrderOrderByWithRelationInput[] | runtime.Types.Skip
  cursor?: Prisma.OrderWhereUniqueInput | runtime.Types.Skip
  take?: number | runtime.Types.Skip
  skip?: number | runtime.Types.Skip
  distinct?: Prisma.OrderScalarFieldEnum | Prisma.OrderScalarFieldEnum[] | runtime.Types.Skip
}

/**
 * Training without action
 */
export type TrainingDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Training
   */
  select?: Prisma.TrainingSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Training
   */
  omit?: Prisma.TrainingOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TrainingInclude<ExtArgs> | null
}
