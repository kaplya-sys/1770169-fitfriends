
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/**
 * This file exports the `Questionnaire` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums"
import type * as Prisma from "../internal/prismaNamespace"

/**
 * Model Questionnaire
 * 
 */
export type QuestionnaireModel = runtime.Types.Result.DefaultSelection<Prisma.$QuestionnairePayload>

export type AggregateQuestionnaire = {
  _count: QuestionnaireCountAggregateOutputType | null
  _avg: QuestionnaireAvgAggregateOutputType | null
  _sum: QuestionnaireSumAggregateOutputType | null
  _min: QuestionnaireMinAggregateOutputType | null
  _max: QuestionnaireMaxAggregateOutputType | null
}

export type QuestionnaireAvgAggregateOutputType = {
  calorieLose: number | null
  calorieWaste: number | null
}

export type QuestionnaireSumAggregateOutputType = {
  calorieLose: number | null
  calorieWaste: number | null
}

export type QuestionnaireMinAggregateOutputType = {
  id: string | null
  fitnessLevel: $Enums.FitnessLevel | null
  trainingTime: $Enums.TrainingTime | null
  calorieLose: number | null
  calorieWaste: number | null
  isReady: boolean | null
}

export type QuestionnaireMaxAggregateOutputType = {
  id: string | null
  fitnessLevel: $Enums.FitnessLevel | null
  trainingTime: $Enums.TrainingTime | null
  calorieLose: number | null
  calorieWaste: number | null
  isReady: boolean | null
}

export type QuestionnaireCountAggregateOutputType = {
  id: number
  fitnessLevel: number
  exercise: number
  trainingTime: number
  calorieLose: number
  calorieWaste: number
  isReady: number
  _all: number
}


export type QuestionnaireAvgAggregateInputType = {
  calorieLose?: true | runtime.Types.Skip
  calorieWaste?: true | runtime.Types.Skip
}

export type QuestionnaireSumAggregateInputType = {
  calorieLose?: true | runtime.Types.Skip
  calorieWaste?: true | runtime.Types.Skip
}

export type QuestionnaireMinAggregateInputType = {
  id?: true | runtime.Types.Skip
  fitnessLevel?: true | runtime.Types.Skip
  trainingTime?: true | runtime.Types.Skip
  calorieLose?: true | runtime.Types.Skip
  calorieWaste?: true | runtime.Types.Skip
  isReady?: true | runtime.Types.Skip
}

export type QuestionnaireMaxAggregateInputType = {
  id?: true | runtime.Types.Skip
  fitnessLevel?: true | runtime.Types.Skip
  trainingTime?: true | runtime.Types.Skip
  calorieLose?: true | runtime.Types.Skip
  calorieWaste?: true | runtime.Types.Skip
  isReady?: true | runtime.Types.Skip
}

export type QuestionnaireCountAggregateInputType = {
  id?: true | runtime.Types.Skip
  fitnessLevel?: true | runtime.Types.Skip
  exercise?: true | runtime.Types.Skip
  trainingTime?: true | runtime.Types.Skip
  calorieLose?: true | runtime.Types.Skip
  calorieWaste?: true | runtime.Types.Skip
  isReady?: true | runtime.Types.Skip
  _all?: true | runtime.Types.Skip
}

export type QuestionnaireAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which Questionnaire to aggregate.
   */
  where?: Prisma.QuestionnaireWhereInput | runtime.Types.Skip
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Questionnaires to fetch.
   */
  orderBy?: Prisma.QuestionnaireOrderByWithRelationInput | Prisma.QuestionnaireOrderByWithRelationInput[] | runtime.Types.Skip
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.QuestionnaireWhereUniqueInput | runtime.Types.Skip
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Questionnaires from the position of the cursor.
   */
  take?: number | runtime.Types.Skip
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Questionnaires.
   */
  skip?: number | runtime.Types.Skip
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned Questionnaires
  **/
  _count?: true | QuestionnaireCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to average
  **/
  _avg?: QuestionnaireAvgAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to sum
  **/
  _sum?: QuestionnaireSumAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: QuestionnaireMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: QuestionnaireMaxAggregateInputType
}

export type GetQuestionnaireAggregateType<T extends QuestionnaireAggregateArgs> = {
      [P in keyof T & keyof AggregateQuestionnaire]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateQuestionnaire[P]>
    : Prisma.GetScalarType<T[P], AggregateQuestionnaire[P]>
}




export type QuestionnaireGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.QuestionnaireWhereInput | runtime.Types.Skip
  orderBy?: Prisma.QuestionnaireOrderByWithAggregationInput | Prisma.QuestionnaireOrderByWithAggregationInput[] | runtime.Types.Skip
  by: Prisma.QuestionnaireScalarFieldEnum[] | Prisma.QuestionnaireScalarFieldEnum
  having?: Prisma.QuestionnaireScalarWhereWithAggregatesInput | runtime.Types.Skip
  take?: number | runtime.Types.Skip
  skip?: number | runtime.Types.Skip
  _count?: QuestionnaireCountAggregateInputType | true
  _avg?: QuestionnaireAvgAggregateInputType
  _sum?: QuestionnaireSumAggregateInputType
  _min?: QuestionnaireMinAggregateInputType
  _max?: QuestionnaireMaxAggregateInputType
}

export type QuestionnaireGroupByOutputType = {
  id: string
  fitnessLevel: $Enums.FitnessLevel
  exercise: $Enums.Exercise[]
  trainingTime: $Enums.TrainingTime
  calorieLose: number
  calorieWaste: number
  isReady: boolean
  _count: QuestionnaireCountAggregateOutputType | null
  _avg: QuestionnaireAvgAggregateOutputType | null
  _sum: QuestionnaireSumAggregateOutputType | null
  _min: QuestionnaireMinAggregateOutputType | null
  _max: QuestionnaireMaxAggregateOutputType | null
}

type GetQuestionnaireGroupByPayload<T extends QuestionnaireGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<QuestionnaireGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof QuestionnaireGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], QuestionnaireGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], QuestionnaireGroupByOutputType[P]>
      }
    >
  > 



export type QuestionnaireWhereInput = {
  AND?: Prisma.QuestionnaireWhereInput | Prisma.QuestionnaireWhereInput[] | runtime.Types.Skip
  OR?: Prisma.QuestionnaireWhereInput[] | runtime.Types.Skip
  NOT?: Prisma.QuestionnaireWhereInput | Prisma.QuestionnaireWhereInput[] | runtime.Types.Skip
  id?: Prisma.StringFilter<"Questionnaire"> | string | runtime.Types.Skip
  fitnessLevel?: Prisma.EnumFitnessLevelFilter<"Questionnaire"> | $Enums.FitnessLevel | runtime.Types.Skip
  exercise?: Prisma.EnumExerciseNullableListFilter<"Questionnaire"> | runtime.Types.Skip
  trainingTime?: Prisma.EnumTrainingTimeFilter<"Questionnaire"> | $Enums.TrainingTime | runtime.Types.Skip
  calorieLose?: Prisma.IntFilter<"Questionnaire"> | number | runtime.Types.Skip
  calorieWaste?: Prisma.IntFilter<"Questionnaire"> | number | runtime.Types.Skip
  isReady?: Prisma.BoolFilter<"Questionnaire"> | boolean | runtime.Types.Skip
  user?: Prisma.XOR<Prisma.UserNullableScalarRelationFilter, Prisma.UserWhereInput> | null | runtime.Types.Skip
}

export type QuestionnaireOrderByWithRelationInput = {
  id?: Prisma.SortOrder | runtime.Types.Skip
  fitnessLevel?: Prisma.SortOrder | runtime.Types.Skip
  exercise?: Prisma.SortOrder | runtime.Types.Skip
  trainingTime?: Prisma.SortOrder | runtime.Types.Skip
  calorieLose?: Prisma.SortOrder | runtime.Types.Skip
  calorieWaste?: Prisma.SortOrder | runtime.Types.Skip
  isReady?: Prisma.SortOrder | runtime.Types.Skip
  user?: Prisma.UserOrderByWithRelationInput | runtime.Types.Skip
}

export type QuestionnaireWhereUniqueInput = Prisma.AtLeast<{
  id?: string | runtime.Types.Skip
  AND?: Prisma.QuestionnaireWhereInput | Prisma.QuestionnaireWhereInput[] | runtime.Types.Skip
  OR?: Prisma.QuestionnaireWhereInput[] | runtime.Types.Skip
  NOT?: Prisma.QuestionnaireWhereInput | Prisma.QuestionnaireWhereInput[] | runtime.Types.Skip
  fitnessLevel?: Prisma.EnumFitnessLevelFilter<"Questionnaire"> | $Enums.FitnessLevel | runtime.Types.Skip
  exercise?: Prisma.EnumExerciseNullableListFilter<"Questionnaire"> | runtime.Types.Skip
  trainingTime?: Prisma.EnumTrainingTimeFilter<"Questionnaire"> | $Enums.TrainingTime | runtime.Types.Skip
  calorieLose?: Prisma.IntFilter<"Questionnaire"> | number | runtime.Types.Skip
  calorieWaste?: Prisma.IntFilter<"Questionnaire"> | number | runtime.Types.Skip
  isReady?: Prisma.BoolFilter<"Questionnaire"> | boolean | runtime.Types.Skip
  user?: Prisma.XOR<Prisma.UserNullableScalarRelationFilter, Prisma.UserWhereInput> | null | runtime.Types.Skip
}, "id">

export type QuestionnaireOrderByWithAggregationInput = {
  id?: Prisma.SortOrder | runtime.Types.Skip
  fitnessLevel?: Prisma.SortOrder | runtime.Types.Skip
  exercise?: Prisma.SortOrder | runtime.Types.Skip
  trainingTime?: Prisma.SortOrder | runtime.Types.Skip
  calorieLose?: Prisma.SortOrder | runtime.Types.Skip
  calorieWaste?: Prisma.SortOrder | runtime.Types.Skip
  isReady?: Prisma.SortOrder | runtime.Types.Skip
  _count?: Prisma.QuestionnaireCountOrderByAggregateInput | runtime.Types.Skip
  _avg?: Prisma.QuestionnaireAvgOrderByAggregateInput | runtime.Types.Skip
  _max?: Prisma.QuestionnaireMaxOrderByAggregateInput | runtime.Types.Skip
  _min?: Prisma.QuestionnaireMinOrderByAggregateInput | runtime.Types.Skip
  _sum?: Prisma.QuestionnaireSumOrderByAggregateInput | runtime.Types.Skip
}

export type QuestionnaireScalarWhereWithAggregatesInput = {
  AND?: Prisma.QuestionnaireScalarWhereWithAggregatesInput | Prisma.QuestionnaireScalarWhereWithAggregatesInput[] | runtime.Types.Skip
  OR?: Prisma.QuestionnaireScalarWhereWithAggregatesInput[] | runtime.Types.Skip
  NOT?: Prisma.QuestionnaireScalarWhereWithAggregatesInput | Prisma.QuestionnaireScalarWhereWithAggregatesInput[] | runtime.Types.Skip
  id?: Prisma.StringWithAggregatesFilter<"Questionnaire"> | string | runtime.Types.Skip
  fitnessLevel?: Prisma.EnumFitnessLevelWithAggregatesFilter<"Questionnaire"> | $Enums.FitnessLevel | runtime.Types.Skip
  exercise?: Prisma.EnumExerciseNullableListFilter<"Questionnaire"> | runtime.Types.Skip
  trainingTime?: Prisma.EnumTrainingTimeWithAggregatesFilter<"Questionnaire"> | $Enums.TrainingTime | runtime.Types.Skip
  calorieLose?: Prisma.IntWithAggregatesFilter<"Questionnaire"> | number | runtime.Types.Skip
  calorieWaste?: Prisma.IntWithAggregatesFilter<"Questionnaire"> | number | runtime.Types.Skip
  isReady?: Prisma.BoolWithAggregatesFilter<"Questionnaire"> | boolean | runtime.Types.Skip
}

export type QuestionnaireCreateInput = {
  id?: string | runtime.Types.Skip
  fitnessLevel: $Enums.FitnessLevel
  exercise?: Prisma.QuestionnaireCreateexerciseInput | $Enums.Exercise[] | runtime.Types.Skip
  trainingTime: $Enums.TrainingTime
  calorieLose?: number | runtime.Types.Skip
  calorieWaste?: number | runtime.Types.Skip
  isReady?: boolean | runtime.Types.Skip
  user?: Prisma.UserCreateNestedOneWithoutQuestionnaireInput | runtime.Types.Skip
}

export type QuestionnaireUncheckedCreateInput = {
  id?: string | runtime.Types.Skip
  fitnessLevel: $Enums.FitnessLevel
  exercise?: Prisma.QuestionnaireCreateexerciseInput | $Enums.Exercise[] | runtime.Types.Skip
  trainingTime: $Enums.TrainingTime
  calorieLose?: number | runtime.Types.Skip
  calorieWaste?: number | runtime.Types.Skip
  isReady?: boolean | runtime.Types.Skip
  user?: Prisma.UserUncheckedCreateNestedOneWithoutQuestionnaireInput | runtime.Types.Skip
}

export type QuestionnaireUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string | runtime.Types.Skip
  fitnessLevel?: Prisma.EnumFitnessLevelFieldUpdateOperationsInput | $Enums.FitnessLevel | runtime.Types.Skip
  exercise?: Prisma.QuestionnaireUpdateexerciseInput | $Enums.Exercise[] | runtime.Types.Skip
  trainingTime?: Prisma.EnumTrainingTimeFieldUpdateOperationsInput | $Enums.TrainingTime | runtime.Types.Skip
  calorieLose?: Prisma.IntFieldUpdateOperationsInput | number | runtime.Types.Skip
  calorieWaste?: Prisma.IntFieldUpdateOperationsInput | number | runtime.Types.Skip
  isReady?: Prisma.BoolFieldUpdateOperationsInput | boolean | runtime.Types.Skip
  user?: Prisma.UserUpdateOneWithoutQuestionnaireNestedInput | runtime.Types.Skip
}

export type QuestionnaireUncheckedUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string | runtime.Types.Skip
  fitnessLevel?: Prisma.EnumFitnessLevelFieldUpdateOperationsInput | $Enums.FitnessLevel | runtime.Types.Skip
  exercise?: Prisma.QuestionnaireUpdateexerciseInput | $Enums.Exercise[] | runtime.Types.Skip
  trainingTime?: Prisma.EnumTrainingTimeFieldUpdateOperationsInput | $Enums.TrainingTime | runtime.Types.Skip
  calorieLose?: Prisma.IntFieldUpdateOperationsInput | number | runtime.Types.Skip
  calorieWaste?: Prisma.IntFieldUpdateOperationsInput | number | runtime.Types.Skip
  isReady?: Prisma.BoolFieldUpdateOperationsInput | boolean | runtime.Types.Skip
  user?: Prisma.UserUncheckedUpdateOneWithoutQuestionnaireNestedInput | runtime.Types.Skip
}

export type QuestionnaireCreateManyInput = {
  id?: string | runtime.Types.Skip
  fitnessLevel: $Enums.FitnessLevel
  exercise?: Prisma.QuestionnaireCreateexerciseInput | $Enums.Exercise[] | runtime.Types.Skip
  trainingTime: $Enums.TrainingTime
  calorieLose?: number | runtime.Types.Skip
  calorieWaste?: number | runtime.Types.Skip
  isReady?: boolean | runtime.Types.Skip
}

export type QuestionnaireUpdateManyMutationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string | runtime.Types.Skip
  fitnessLevel?: Prisma.EnumFitnessLevelFieldUpdateOperationsInput | $Enums.FitnessLevel | runtime.Types.Skip
  exercise?: Prisma.QuestionnaireUpdateexerciseInput | $Enums.Exercise[] | runtime.Types.Skip
  trainingTime?: Prisma.EnumTrainingTimeFieldUpdateOperationsInput | $Enums.TrainingTime | runtime.Types.Skip
  calorieLose?: Prisma.IntFieldUpdateOperationsInput | number | runtime.Types.Skip
  calorieWaste?: Prisma.IntFieldUpdateOperationsInput | number | runtime.Types.Skip
  isReady?: Prisma.BoolFieldUpdateOperationsInput | boolean | runtime.Types.Skip
}

export type QuestionnaireUncheckedUpdateManyInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string | runtime.Types.Skip
  fitnessLevel?: Prisma.EnumFitnessLevelFieldUpdateOperationsInput | $Enums.FitnessLevel | runtime.Types.Skip
  exercise?: Prisma.QuestionnaireUpdateexerciseInput | $Enums.Exercise[] | runtime.Types.Skip
  trainingTime?: Prisma.EnumTrainingTimeFieldUpdateOperationsInput | $Enums.TrainingTime | runtime.Types.Skip
  calorieLose?: Prisma.IntFieldUpdateOperationsInput | number | runtime.Types.Skip
  calorieWaste?: Prisma.IntFieldUpdateOperationsInput | number | runtime.Types.Skip
  isReady?: Prisma.BoolFieldUpdateOperationsInput | boolean | runtime.Types.Skip
}

export type QuestionnaireNullableScalarRelationFilter = {
  is?: Prisma.QuestionnaireWhereInput | null | runtime.Types.Skip
  isNot?: Prisma.QuestionnaireWhereInput | null | runtime.Types.Skip
}

export type EnumExerciseNullableListFilter<$PrismaModel = never> = {
  equals?: $Enums.Exercise[] | Prisma.ListEnumExerciseFieldRefInput<$PrismaModel> | null | runtime.Types.Skip
  has?: $Enums.Exercise | Prisma.EnumExerciseFieldRefInput<$PrismaModel> | null | runtime.Types.Skip
  hasEvery?: $Enums.Exercise[] | Prisma.ListEnumExerciseFieldRefInput<$PrismaModel> | runtime.Types.Skip
  hasSome?: $Enums.Exercise[] | Prisma.ListEnumExerciseFieldRefInput<$PrismaModel> | runtime.Types.Skip
  isEmpty?: boolean | runtime.Types.Skip
}

export type QuestionnaireCountOrderByAggregateInput = {
  id?: Prisma.SortOrder | runtime.Types.Skip
  fitnessLevel?: Prisma.SortOrder | runtime.Types.Skip
  exercise?: Prisma.SortOrder | runtime.Types.Skip
  trainingTime?: Prisma.SortOrder | runtime.Types.Skip
  calorieLose?: Prisma.SortOrder | runtime.Types.Skip
  calorieWaste?: Prisma.SortOrder | runtime.Types.Skip
  isReady?: Prisma.SortOrder | runtime.Types.Skip
}

export type QuestionnaireAvgOrderByAggregateInput = {
  calorieLose?: Prisma.SortOrder | runtime.Types.Skip
  calorieWaste?: Prisma.SortOrder | runtime.Types.Skip
}

export type QuestionnaireMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder | runtime.Types.Skip
  fitnessLevel?: Prisma.SortOrder | runtime.Types.Skip
  trainingTime?: Prisma.SortOrder | runtime.Types.Skip
  calorieLose?: Prisma.SortOrder | runtime.Types.Skip
  calorieWaste?: Prisma.SortOrder | runtime.Types.Skip
  isReady?: Prisma.SortOrder | runtime.Types.Skip
}

export type QuestionnaireMinOrderByAggregateInput = {
  id?: Prisma.SortOrder | runtime.Types.Skip
  fitnessLevel?: Prisma.SortOrder | runtime.Types.Skip
  trainingTime?: Prisma.SortOrder | runtime.Types.Skip
  calorieLose?: Prisma.SortOrder | runtime.Types.Skip
  calorieWaste?: Prisma.SortOrder | runtime.Types.Skip
  isReady?: Prisma.SortOrder | runtime.Types.Skip
}

export type QuestionnaireSumOrderByAggregateInput = {
  calorieLose?: Prisma.SortOrder | runtime.Types.Skip
  calorieWaste?: Prisma.SortOrder | runtime.Types.Skip
}

export type QuestionnaireCreateNestedOneWithoutUserInput = {
  create?: Prisma.XOR<Prisma.QuestionnaireCreateWithoutUserInput, Prisma.QuestionnaireUncheckedCreateWithoutUserInput> | runtime.Types.Skip
  connectOrCreate?: Prisma.QuestionnaireCreateOrConnectWithoutUserInput | runtime.Types.Skip
  connect?: Prisma.QuestionnaireWhereUniqueInput | runtime.Types.Skip
}

export type QuestionnaireUpdateOneWithoutUserNestedInput = {
  create?: Prisma.XOR<Prisma.QuestionnaireCreateWithoutUserInput, Prisma.QuestionnaireUncheckedCreateWithoutUserInput> | runtime.Types.Skip
  connectOrCreate?: Prisma.QuestionnaireCreateOrConnectWithoutUserInput | runtime.Types.Skip
  upsert?: Prisma.QuestionnaireUpsertWithoutUserInput | runtime.Types.Skip
  disconnect?: Prisma.QuestionnaireWhereInput | boolean | runtime.Types.Skip
  delete?: Prisma.QuestionnaireWhereInput | boolean | runtime.Types.Skip
  connect?: Prisma.QuestionnaireWhereUniqueInput | runtime.Types.Skip
  update?: Prisma.XOR<Prisma.XOR<Prisma.QuestionnaireUpdateToOneWithWhereWithoutUserInput, Prisma.QuestionnaireUpdateWithoutUserInput>, Prisma.QuestionnaireUncheckedUpdateWithoutUserInput> | runtime.Types.Skip
}

export type QuestionnaireCreateexerciseInput = {
  set: $Enums.Exercise[]
}

export type QuestionnaireUpdateexerciseInput = {
  set?: $Enums.Exercise[] | runtime.Types.Skip
  push?: $Enums.Exercise | $Enums.Exercise[] | runtime.Types.Skip
}

export type QuestionnaireCreateWithoutUserInput = {
  id?: string | runtime.Types.Skip
  fitnessLevel: $Enums.FitnessLevel
  exercise?: Prisma.QuestionnaireCreateexerciseInput | $Enums.Exercise[] | runtime.Types.Skip
  trainingTime: $Enums.TrainingTime
  calorieLose?: number | runtime.Types.Skip
  calorieWaste?: number | runtime.Types.Skip
  isReady?: boolean | runtime.Types.Skip
}

export type QuestionnaireUncheckedCreateWithoutUserInput = {
  id?: string | runtime.Types.Skip
  fitnessLevel: $Enums.FitnessLevel
  exercise?: Prisma.QuestionnaireCreateexerciseInput | $Enums.Exercise[] | runtime.Types.Skip
  trainingTime: $Enums.TrainingTime
  calorieLose?: number | runtime.Types.Skip
  calorieWaste?: number | runtime.Types.Skip
  isReady?: boolean | runtime.Types.Skip
}

export type QuestionnaireCreateOrConnectWithoutUserInput = {
  where: Prisma.QuestionnaireWhereUniqueInput
  create: Prisma.XOR<Prisma.QuestionnaireCreateWithoutUserInput, Prisma.QuestionnaireUncheckedCreateWithoutUserInput>
}

export type QuestionnaireUpsertWithoutUserInput = {
  update: Prisma.XOR<Prisma.QuestionnaireUpdateWithoutUserInput, Prisma.QuestionnaireUncheckedUpdateWithoutUserInput>
  create: Prisma.XOR<Prisma.QuestionnaireCreateWithoutUserInput, Prisma.QuestionnaireUncheckedCreateWithoutUserInput>
  where?: Prisma.QuestionnaireWhereInput | runtime.Types.Skip
}

export type QuestionnaireUpdateToOneWithWhereWithoutUserInput = {
  where?: Prisma.QuestionnaireWhereInput | runtime.Types.Skip
  data: Prisma.XOR<Prisma.QuestionnaireUpdateWithoutUserInput, Prisma.QuestionnaireUncheckedUpdateWithoutUserInput>
}

export type QuestionnaireUpdateWithoutUserInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string | runtime.Types.Skip
  fitnessLevel?: Prisma.EnumFitnessLevelFieldUpdateOperationsInput | $Enums.FitnessLevel | runtime.Types.Skip
  exercise?: Prisma.QuestionnaireUpdateexerciseInput | $Enums.Exercise[] | runtime.Types.Skip
  trainingTime?: Prisma.EnumTrainingTimeFieldUpdateOperationsInput | $Enums.TrainingTime | runtime.Types.Skip
  calorieLose?: Prisma.IntFieldUpdateOperationsInput | number | runtime.Types.Skip
  calorieWaste?: Prisma.IntFieldUpdateOperationsInput | number | runtime.Types.Skip
  isReady?: Prisma.BoolFieldUpdateOperationsInput | boolean | runtime.Types.Skip
}

export type QuestionnaireUncheckedUpdateWithoutUserInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string | runtime.Types.Skip
  fitnessLevel?: Prisma.EnumFitnessLevelFieldUpdateOperationsInput | $Enums.FitnessLevel | runtime.Types.Skip
  exercise?: Prisma.QuestionnaireUpdateexerciseInput | $Enums.Exercise[] | runtime.Types.Skip
  trainingTime?: Prisma.EnumTrainingTimeFieldUpdateOperationsInput | $Enums.TrainingTime | runtime.Types.Skip
  calorieLose?: Prisma.IntFieldUpdateOperationsInput | number | runtime.Types.Skip
  calorieWaste?: Prisma.IntFieldUpdateOperationsInput | number | runtime.Types.Skip
  isReady?: Prisma.BoolFieldUpdateOperationsInput | boolean | runtime.Types.Skip
}



export type QuestionnaireSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean | runtime.Types.Skip
  fitnessLevel?: boolean | runtime.Types.Skip
  exercise?: boolean | runtime.Types.Skip
  trainingTime?: boolean | runtime.Types.Skip
  calorieLose?: boolean | runtime.Types.Skip
  calorieWaste?: boolean | runtime.Types.Skip
  isReady?: boolean | runtime.Types.Skip
  user?: boolean | Prisma.Questionnaire$userArgs<ExtArgs> | runtime.Types.Skip
}, ExtArgs["result"]["questionnaire"]>

export type QuestionnaireSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean | runtime.Types.Skip
  fitnessLevel?: boolean | runtime.Types.Skip
  exercise?: boolean | runtime.Types.Skip
  trainingTime?: boolean | runtime.Types.Skip
  calorieLose?: boolean | runtime.Types.Skip
  calorieWaste?: boolean | runtime.Types.Skip
  isReady?: boolean | runtime.Types.Skip
}, ExtArgs["result"]["questionnaire"]>

export type QuestionnaireSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean | runtime.Types.Skip
  fitnessLevel?: boolean | runtime.Types.Skip
  exercise?: boolean | runtime.Types.Skip
  trainingTime?: boolean | runtime.Types.Skip
  calorieLose?: boolean | runtime.Types.Skip
  calorieWaste?: boolean | runtime.Types.Skip
  isReady?: boolean | runtime.Types.Skip
}, ExtArgs["result"]["questionnaire"]>

export type QuestionnaireSelectScalar = {
  id?: boolean | runtime.Types.Skip
  fitnessLevel?: boolean | runtime.Types.Skip
  exercise?: boolean | runtime.Types.Skip
  trainingTime?: boolean | runtime.Types.Skip
  calorieLose?: boolean | runtime.Types.Skip
  calorieWaste?: boolean | runtime.Types.Skip
  isReady?: boolean | runtime.Types.Skip
}

export type QuestionnaireOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "fitnessLevel" | "exercise" | "trainingTime" | "calorieLose" | "calorieWaste" | "isReady", ExtArgs["result"]["questionnaire"], runtime.Types.Skip>
export type QuestionnaireInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  user?: boolean | Prisma.Questionnaire$userArgs<ExtArgs> | runtime.Types.Skip
}
export type QuestionnaireIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {}
export type QuestionnaireIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {}

export type $QuestionnairePayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "Questionnaire"
  objects: {
    user: Prisma.$UserPayload<ExtArgs> | null
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: string
    fitnessLevel: $Enums.FitnessLevel
    exercise: $Enums.Exercise[]
    trainingTime: $Enums.TrainingTime
    calorieLose: number
    calorieWaste: number
    isReady: boolean
  }, ExtArgs["result"]["questionnaire"]>
  composites: {}
}

export type QuestionnaireGetPayload<S extends boolean | null | undefined | QuestionnaireDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$QuestionnairePayload, S>

export type QuestionnaireCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<QuestionnaireFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: QuestionnaireCountAggregateInputType | true
  }

export interface QuestionnaireDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Questionnaire'], meta: { name: 'Questionnaire' } }
  /**
   * Find zero or one Questionnaire that matches the filter.
   * @param {QuestionnaireFindUniqueArgs} args - Arguments to find a Questionnaire
   * @example
   * // Get one Questionnaire
   * const questionnaire = await prisma.questionnaire.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends QuestionnaireFindUniqueArgs>(args: Prisma.SelectSubset<T, QuestionnaireFindUniqueArgs<ExtArgs>>): Prisma.Prisma__QuestionnaireClient<runtime.Types.Result.GetResult<Prisma.$QuestionnairePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one Questionnaire that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {QuestionnaireFindUniqueOrThrowArgs} args - Arguments to find a Questionnaire
   * @example
   * // Get one Questionnaire
   * const questionnaire = await prisma.questionnaire.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends QuestionnaireFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, QuestionnaireFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__QuestionnaireClient<runtime.Types.Result.GetResult<Prisma.$QuestionnairePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Questionnaire that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {QuestionnaireFindFirstArgs} args - Arguments to find a Questionnaire
   * @example
   * // Get one Questionnaire
   * const questionnaire = await prisma.questionnaire.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends QuestionnaireFindFirstArgs>(args?: Prisma.SelectSubset<T, QuestionnaireFindFirstArgs<ExtArgs>>): Prisma.Prisma__QuestionnaireClient<runtime.Types.Result.GetResult<Prisma.$QuestionnairePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Questionnaire that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {QuestionnaireFindFirstOrThrowArgs} args - Arguments to find a Questionnaire
   * @example
   * // Get one Questionnaire
   * const questionnaire = await prisma.questionnaire.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends QuestionnaireFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, QuestionnaireFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__QuestionnaireClient<runtime.Types.Result.GetResult<Prisma.$QuestionnairePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more Questionnaires that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {QuestionnaireFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all Questionnaires
   * const questionnaires = await prisma.questionnaire.findMany()
   * 
   * // Get first 10 Questionnaires
   * const questionnaires = await prisma.questionnaire.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const questionnaireWithIdOnly = await prisma.questionnaire.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends QuestionnaireFindManyArgs>(args?: Prisma.SelectSubset<T, QuestionnaireFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$QuestionnairePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a Questionnaire.
   * @param {QuestionnaireCreateArgs} args - Arguments to create a Questionnaire.
   * @example
   * // Create one Questionnaire
   * const Questionnaire = await prisma.questionnaire.create({
   *   data: {
   *     // ... data to create a Questionnaire
   *   }
   * })
   * 
   */
  create<T extends QuestionnaireCreateArgs>(args: Prisma.SelectSubset<T, QuestionnaireCreateArgs<ExtArgs>>): Prisma.Prisma__QuestionnaireClient<runtime.Types.Result.GetResult<Prisma.$QuestionnairePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many Questionnaires.
   * @param {QuestionnaireCreateManyArgs} args - Arguments to create many Questionnaires.
   * @example
   * // Create many Questionnaires
   * const questionnaire = await prisma.questionnaire.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends QuestionnaireCreateManyArgs>(args?: Prisma.SelectSubset<T, QuestionnaireCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many Questionnaires and returns the data saved in the database.
   * @param {QuestionnaireCreateManyAndReturnArgs} args - Arguments to create many Questionnaires.
   * @example
   * // Create many Questionnaires
   * const questionnaire = await prisma.questionnaire.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many Questionnaires and only return the `id`
   * const questionnaireWithIdOnly = await prisma.questionnaire.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends QuestionnaireCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, QuestionnaireCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$QuestionnairePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a Questionnaire.
   * @param {QuestionnaireDeleteArgs} args - Arguments to delete one Questionnaire.
   * @example
   * // Delete one Questionnaire
   * const Questionnaire = await prisma.questionnaire.delete({
   *   where: {
   *     // ... filter to delete one Questionnaire
   *   }
   * })
   * 
   */
  delete<T extends QuestionnaireDeleteArgs>(args: Prisma.SelectSubset<T, QuestionnaireDeleteArgs<ExtArgs>>): Prisma.Prisma__QuestionnaireClient<runtime.Types.Result.GetResult<Prisma.$QuestionnairePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one Questionnaire.
   * @param {QuestionnaireUpdateArgs} args - Arguments to update one Questionnaire.
   * @example
   * // Update one Questionnaire
   * const questionnaire = await prisma.questionnaire.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends QuestionnaireUpdateArgs>(args: Prisma.SelectSubset<T, QuestionnaireUpdateArgs<ExtArgs>>): Prisma.Prisma__QuestionnaireClient<runtime.Types.Result.GetResult<Prisma.$QuestionnairePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more Questionnaires.
   * @param {QuestionnaireDeleteManyArgs} args - Arguments to filter Questionnaires to delete.
   * @example
   * // Delete a few Questionnaires
   * const { count } = await prisma.questionnaire.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends QuestionnaireDeleteManyArgs>(args?: Prisma.SelectSubset<T, QuestionnaireDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Questionnaires.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {QuestionnaireUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many Questionnaires
   * const questionnaire = await prisma.questionnaire.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends QuestionnaireUpdateManyArgs>(args: Prisma.SelectSubset<T, QuestionnaireUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Questionnaires and returns the data updated in the database.
   * @param {QuestionnaireUpdateManyAndReturnArgs} args - Arguments to update many Questionnaires.
   * @example
   * // Update many Questionnaires
   * const questionnaire = await prisma.questionnaire.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more Questionnaires and only return the `id`
   * const questionnaireWithIdOnly = await prisma.questionnaire.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends QuestionnaireUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, QuestionnaireUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$QuestionnairePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one Questionnaire.
   * @param {QuestionnaireUpsertArgs} args - Arguments to update or create a Questionnaire.
   * @example
   * // Update or create a Questionnaire
   * const questionnaire = await prisma.questionnaire.upsert({
   *   create: {
   *     // ... data to create a Questionnaire
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the Questionnaire we want to update
   *   }
   * })
   */
  upsert<T extends QuestionnaireUpsertArgs>(args: Prisma.SelectSubset<T, QuestionnaireUpsertArgs<ExtArgs>>): Prisma.Prisma__QuestionnaireClient<runtime.Types.Result.GetResult<Prisma.$QuestionnairePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of Questionnaires.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {QuestionnaireCountArgs} args - Arguments to filter Questionnaires to count.
   * @example
   * // Count the number of Questionnaires
   * const count = await prisma.questionnaire.count({
   *   where: {
   *     // ... the filter for the Questionnaires we want to count
   *   }
   * })
  **/
  count<T extends QuestionnaireCountArgs>(
    args?: Prisma.Subset<T, QuestionnaireCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], QuestionnaireCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a Questionnaire.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {QuestionnaireAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends QuestionnaireAggregateArgs>(args: Prisma.Subset<T, QuestionnaireAggregateArgs>): Prisma.PrismaPromise<GetQuestionnaireAggregateType<T>>

  /**
   * Group by Questionnaire.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {QuestionnaireGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends QuestionnaireGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: QuestionnaireGroupByArgs['orderBy'] }
      : { orderBy?: QuestionnaireGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, QuestionnaireGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetQuestionnaireGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the Questionnaire model
 */
readonly fields: QuestionnaireFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for Questionnaire.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__QuestionnaireClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  user<T extends Prisma.Questionnaire$userArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.Questionnaire$userArgs<ExtArgs>>): Prisma.Prisma__UserClient<runtime.Types.Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the Questionnaire model
 */
export interface QuestionnaireFieldRefs {
  readonly id: Prisma.FieldRef<"Questionnaire", 'String'>
  readonly fitnessLevel: Prisma.FieldRef<"Questionnaire", 'FitnessLevel'>
  readonly exercise: Prisma.FieldRef<"Questionnaire", 'Exercise[]'>
  readonly trainingTime: Prisma.FieldRef<"Questionnaire", 'TrainingTime'>
  readonly calorieLose: Prisma.FieldRef<"Questionnaire", 'Int'>
  readonly calorieWaste: Prisma.FieldRef<"Questionnaire", 'Int'>
  readonly isReady: Prisma.FieldRef<"Questionnaire", 'Boolean'>
}
    

// Custom InputTypes
/**
 * Questionnaire findUnique
 */
export type QuestionnaireFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Questionnaire
   */
  select?: Prisma.QuestionnaireSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Questionnaire
   */
  omit?: Prisma.QuestionnaireOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.QuestionnaireInclude<ExtArgs> | null
  /**
   * Filter, which Questionnaire to fetch.
   */
  where: Prisma.QuestionnaireWhereUniqueInput
}

/**
 * Questionnaire findUniqueOrThrow
 */
export type QuestionnaireFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Questionnaire
   */
  select?: Prisma.QuestionnaireSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Questionnaire
   */
  omit?: Prisma.QuestionnaireOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.QuestionnaireInclude<ExtArgs> | null
  /**
   * Filter, which Questionnaire to fetch.
   */
  where: Prisma.QuestionnaireWhereUniqueInput
}

/**
 * Questionnaire findFirst
 */
export type QuestionnaireFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Questionnaire
   */
  select?: Prisma.QuestionnaireSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Questionnaire
   */
  omit?: Prisma.QuestionnaireOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.QuestionnaireInclude<ExtArgs> | null
  /**
   * Filter, which Questionnaire to fetch.
   */
  where?: Prisma.QuestionnaireWhereInput | runtime.Types.Skip
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Questionnaires to fetch.
   */
  orderBy?: Prisma.QuestionnaireOrderByWithRelationInput | Prisma.QuestionnaireOrderByWithRelationInput[] | runtime.Types.Skip
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for Questionnaires.
   */
  cursor?: Prisma.QuestionnaireWhereUniqueInput | runtime.Types.Skip
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Questionnaires from the position of the cursor.
   */
  take?: number | runtime.Types.Skip
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Questionnaires.
   */
  skip?: number | runtime.Types.Skip
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of Questionnaires.
   */
  distinct?: Prisma.QuestionnaireScalarFieldEnum | Prisma.QuestionnaireScalarFieldEnum[] | runtime.Types.Skip
}

/**
 * Questionnaire findFirstOrThrow
 */
export type QuestionnaireFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Questionnaire
   */
  select?: Prisma.QuestionnaireSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Questionnaire
   */
  omit?: Prisma.QuestionnaireOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.QuestionnaireInclude<ExtArgs> | null
  /**
   * Filter, which Questionnaire to fetch.
   */
  where?: Prisma.QuestionnaireWhereInput | runtime.Types.Skip
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Questionnaires to fetch.
   */
  orderBy?: Prisma.QuestionnaireOrderByWithRelationInput | Prisma.QuestionnaireOrderByWithRelationInput[] | runtime.Types.Skip
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for Questionnaires.
   */
  cursor?: Prisma.QuestionnaireWhereUniqueInput | runtime.Types.Skip
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Questionnaires from the position of the cursor.
   */
  take?: number | runtime.Types.Skip
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Questionnaires.
   */
  skip?: number | runtime.Types.Skip
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of Questionnaires.
   */
  distinct?: Prisma.QuestionnaireScalarFieldEnum | Prisma.QuestionnaireScalarFieldEnum[] | runtime.Types.Skip
}

/**
 * Questionnaire findMany
 */
export type QuestionnaireFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Questionnaire
   */
  select?: Prisma.QuestionnaireSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Questionnaire
   */
  omit?: Prisma.QuestionnaireOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.QuestionnaireInclude<ExtArgs> | null
  /**
   * Filter, which Questionnaires to fetch.
   */
  where?: Prisma.QuestionnaireWhereInput | runtime.Types.Skip
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Questionnaires to fetch.
   */
  orderBy?: Prisma.QuestionnaireOrderByWithRelationInput | Prisma.QuestionnaireOrderByWithRelationInput[] | runtime.Types.Skip
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing Questionnaires.
   */
  cursor?: Prisma.QuestionnaireWhereUniqueInput | runtime.Types.Skip
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Questionnaires from the position of the cursor.
   */
  take?: number | runtime.Types.Skip
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Questionnaires.
   */
  skip?: number | runtime.Types.Skip
  distinct?: Prisma.QuestionnaireScalarFieldEnum | Prisma.QuestionnaireScalarFieldEnum[] | runtime.Types.Skip
}

/**
 * Questionnaire create
 */
export type QuestionnaireCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Questionnaire
   */
  select?: Prisma.QuestionnaireSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Questionnaire
   */
  omit?: Prisma.QuestionnaireOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.QuestionnaireInclude<ExtArgs> | null
  /**
   * The data needed to create a Questionnaire.
   */
  data: Prisma.XOR<Prisma.QuestionnaireCreateInput, Prisma.QuestionnaireUncheckedCreateInput>
}

/**
 * Questionnaire createMany
 */
export type QuestionnaireCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many Questionnaires.
   */
  data: Prisma.QuestionnaireCreateManyInput | Prisma.QuestionnaireCreateManyInput[]
  skipDuplicates?: boolean | runtime.Types.Skip
}

/**
 * Questionnaire createManyAndReturn
 */
export type QuestionnaireCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Questionnaire
   */
  select?: Prisma.QuestionnaireSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the Questionnaire
   */
  omit?: Prisma.QuestionnaireOmit<ExtArgs> | null
  /**
   * The data used to create many Questionnaires.
   */
  data: Prisma.QuestionnaireCreateManyInput | Prisma.QuestionnaireCreateManyInput[]
  skipDuplicates?: boolean | runtime.Types.Skip
}

/**
 * Questionnaire update
 */
export type QuestionnaireUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Questionnaire
   */
  select?: Prisma.QuestionnaireSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Questionnaire
   */
  omit?: Prisma.QuestionnaireOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.QuestionnaireInclude<ExtArgs> | null
  /**
   * The data needed to update a Questionnaire.
   */
  data: Prisma.XOR<Prisma.QuestionnaireUpdateInput, Prisma.QuestionnaireUncheckedUpdateInput>
  /**
   * Choose, which Questionnaire to update.
   */
  where: Prisma.QuestionnaireWhereUniqueInput
}

/**
 * Questionnaire updateMany
 */
export type QuestionnaireUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update Questionnaires.
   */
  data: Prisma.XOR<Prisma.QuestionnaireUpdateManyMutationInput, Prisma.QuestionnaireUncheckedUpdateManyInput>
  /**
   * Filter which Questionnaires to update
   */
  where?: Prisma.QuestionnaireWhereInput | runtime.Types.Skip
  /**
   * Limit how many Questionnaires to update.
   */
  limit?: number | runtime.Types.Skip
}

/**
 * Questionnaire updateManyAndReturn
 */
export type QuestionnaireUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Questionnaire
   */
  select?: Prisma.QuestionnaireSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the Questionnaire
   */
  omit?: Prisma.QuestionnaireOmit<ExtArgs> | null
  /**
   * The data used to update Questionnaires.
   */
  data: Prisma.XOR<Prisma.QuestionnaireUpdateManyMutationInput, Prisma.QuestionnaireUncheckedUpdateManyInput>
  /**
   * Filter which Questionnaires to update
   */
  where?: Prisma.QuestionnaireWhereInput | runtime.Types.Skip
  /**
   * Limit how many Questionnaires to update.
   */
  limit?: number | runtime.Types.Skip
}

/**
 * Questionnaire upsert
 */
export type QuestionnaireUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Questionnaire
   */
  select?: Prisma.QuestionnaireSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Questionnaire
   */
  omit?: Prisma.QuestionnaireOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.QuestionnaireInclude<ExtArgs> | null
  /**
   * The filter to search for the Questionnaire to update in case it exists.
   */
  where: Prisma.QuestionnaireWhereUniqueInput
  /**
   * In case the Questionnaire found by the `where` argument doesn't exist, create a new Questionnaire with this data.
   */
  create: Prisma.XOR<Prisma.QuestionnaireCreateInput, Prisma.QuestionnaireUncheckedCreateInput>
  /**
   * In case the Questionnaire was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.QuestionnaireUpdateInput, Prisma.QuestionnaireUncheckedUpdateInput>
}

/**
 * Questionnaire delete
 */
export type QuestionnaireDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Questionnaire
   */
  select?: Prisma.QuestionnaireSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Questionnaire
   */
  omit?: Prisma.QuestionnaireOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.QuestionnaireInclude<ExtArgs> | null
  /**
   * Filter which Questionnaire to delete.
   */
  where: Prisma.QuestionnaireWhereUniqueInput
}

/**
 * Questionnaire deleteMany
 */
export type QuestionnaireDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which Questionnaires to delete
   */
  where?: Prisma.QuestionnaireWhereInput | runtime.Types.Skip
  /**
   * Limit how many Questionnaires to delete.
   */
  limit?: number | runtime.Types.Skip
}

/**
 * Questionnaire.user
 */
export type Questionnaire$userArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the User
   */
  select?: Prisma.UserSelect<ExtArgs> | null
  /**
   * Omit specific fields from the User
   */
  omit?: Prisma.UserOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.UserInclude<ExtArgs> | null
  where?: Prisma.UserWhereInput | runtime.Types.Skip
}

/**
 * Questionnaire without action
 */
export type QuestionnaireDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Questionnaire
   */
  select?: Prisma.QuestionnaireSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Questionnaire
   */
  omit?: Prisma.QuestionnaireOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.QuestionnaireInclude<ExtArgs> | null
}
