
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/**
 * This file should be your main import to use Prisma. Through it you get access to all the models, enums, and input types.
 *
 * ðŸŸ¢ You can import this file directly.
 */

import * as process from 'node:process'
import * as path from 'node:path'

import * as runtime from "@prisma/client/runtime/library"
import * as $Enums from "./enums"
import * as $Class from "./internal/class"
import * as Prisma from "./internal/prismaNamespace"

export * as $Enums from './enums'
/**
 * ## Prisma Client
 * 
 * Type-safe database client for TypeScript
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Users
 * const users = await prisma.user.findMany()
 * ```
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export const PrismaClient = $Class.getPrismaClientClass(__dirname)
export type PrismaClient<ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions, Log = $Class.LogOptions<ClientOptions>, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = $Class.PrismaClient<ClientOptions, Log, ExtArgs>
export { Prisma }


// file annotations for bundling tools to include these files
path.join(__dirname, "query_engine-windows.dll.node")
path.join(process.cwd(), "../src/lib/generated/prisma/query_engine-windows.dll.node")

/**
 * Model User
 * 
 */
export type User = Prisma.UserModel
/**
 * Model RefreshSessions
 * 
 */
export type RefreshSessions = Prisma.RefreshSessionsModel
/**
 * Model Training
 * 
 */
export type Training = Prisma.TrainingModel
/**
 * Model Questionnaire
 * 
 */
export type Questionnaire = Prisma.QuestionnaireModel
/**
 * Model Balance
 * 
 */
export type Balance = Prisma.BalanceModel
/**
 * Model Order
 * 
 */
export type Order = Prisma.OrderModel
/**
 * Model Feedback
 * 
 */
export type Feedback = Prisma.FeedbackModel

export type Location = $Enums.Location
export const Location = $Enums.Location

export type Gender = $Enums.Gender
export const Gender = $Enums.Gender

export type Role = $Enums.Role
export const Role = $Enums.Role

export type FitnessLevel = $Enums.FitnessLevel
export const FitnessLevel = $Enums.FitnessLevel

export type Exercise = $Enums.Exercise
export const Exercise = $Enums.Exercise

export type TrainingTime = $Enums.TrainingTime
export const TrainingTime = $Enums.TrainingTime

export type PaymentMethod = $Enums.PaymentMethod
export const PaymentMethod = $Enums.PaymentMethod
